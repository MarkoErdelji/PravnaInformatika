( defrule pen3-deductive-gen214 ( declare ( salience ( calc-salience fine ) ) ) ( run-deductive-rules ) ( object ( name ?gen130 ) ( is-a aggravating_factor ) ( defendant ?Defendant ) ) ( not ( object ( is-a fine ) ( value 10000 ) ) ) ( test ( not ( instance-existp ( symbol-to-instance-name ( sym-cat fine 10000 ) ) ) ) ) => ( bind ?oid ( symbol-to-instance-name ( sym-cat fine 10000 ) ) ) ( make-instance ?oid of fine ( value 10000 ) ) )
( defrule pen4-deductive-gen215 ( declare ( salience ( calc-salience imprisonment ) ) ) ( run-deductive-rules ) ( object ( name ?gen157 ) ( is-a child_victim_factor ) ( defendant ?Defendant ) ) ( not ( object ( is-a imprisonment ) ( value 12 ) ) ) ( test ( not ( instance-existp ( symbol-to-instance-name ( sym-cat imprisonment 12 ) ) ) ) ) => ( bind ?oid ( symbol-to-instance-name ( sym-cat imprisonment 12 ) ) ) ( make-instance ?oid of imprisonment ( value 12 ) ) )
( defrule pen5-deductive-gen216 ( declare ( salience ( calc-salience imprisonment ) ) ) ( run-deductive-rules ) ( object ( name ?gen175 ) ( is-a multiple_victims_factor ) ( defendant ?Defendant ) ) ( not ( object ( is-a imprisonment ) ( value 24 ) ) ) ( test ( not ( instance-existp ( symbol-to-instance-name ( sym-cat imprisonment 24 ) ) ) ) ) => ( bind ?oid ( symbol-to-instance-name ( sym-cat imprisonment 24 ) ) ) ( make-instance ?oid of imprisonment ( value 24 ) ) )
( defrule pen6-deductive-gen217 ( declare ( salience ( calc-salience fine ) ) ) ( run-deductive-rules ) ( object ( name ?gen184 ) ( is-a light_offense_factor ) ( defendant ?Defendant ) ) ( not ( object ( is-a fine ) ( value 2000 ) ) ) ( test ( not ( instance-existp ( symbol-to-instance-name ( sym-cat fine 2000 ) ) ) ) ) => ( bind ?oid ( symbol-to-instance-name ( sym-cat fine 2000 ) ) ) ( make-instance ?oid of fine ( value 2000 ) ) )
( defrule pen7-deductive-gen218 ( declare ( salience ( calc-salience fine ) ) ) ( run-deductive-rules ) ( object ( name ?gen193 ) ( is-a threat_offense_factor ) ( defendant ?Defendant ) ) ( not ( object ( is-a fine ) ( value 3000 ) ) ) ( test ( not ( instance-existp ( symbol-to-instance-name ( sym-cat fine 3000 ) ) ) ) ) => ( bind ?oid ( symbol-to-instance-name ( sym-cat fine 3000 ) ) ) ( make-instance ?oid of fine ( value 3000 ) ) )
( defrule pen7-defeasibly-dot-gen219 ( declare ( salience ( + 1000 ( calc-defeasible-priority -1 [pen7] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen194 ) ( is-a fine ) ( value 3000 ) ( positive 1 ) ( positive-derivator pen7 $? ) ) ( test ( eq ( class ?gen194 ) fine ) ) ( not ( and ( object ( name ?gen201 ) ( is-a threat_offense_factor ) ( defendant ?Defendant ) ( positive ?gen200 & : ( >= ?gen200 1 ) ) ) ( object ( name ?gen194 ) ( is-a fine ) ( negative ~ 2 ) ( positive-overruled $?gen196 & : ( not ( member$ pen7 $?gen196 ) ) ) ) ) )  ( not ( object ( name ?gen194 ) ( is-a fine ) ( positive 0 ) ) ) ( test ( instance-existp ?gen194 ) ) => ( message-modify-instance ?gen194 ( positive 0 ) ) )
( defrule pen7-defeasibly-gen221 ( declare ( salience ( + 1000 ( calc-defeasible-priority 1 [pen7] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen201 ) ( is-a threat_offense_factor ) ( defendant ?Defendant ) ( positive ?gen200 & : ( >= ?gen200 1 ) ) ) ( object ( name ?gen194 ) ( is-a fine ) ( value 3000 ) ( positive 0 ) ( negative ~ 2 ) ( positive-overruled $?gen196 & : ( not ( member$ pen7 $?gen196 ) ) ) ) ( test ( eq ( class ?gen194 ) fine ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen194 ) ( is-a fine ) ( positive 1 ) ( positive-derivator pen7 ?gen201 ) ) ) ( test ( instance-existp ?gen194 ) ) => ( message-modify-instance ?gen194 ( positive 1 ) ( positive-derivator pen7 ?gen201 ) ) )
( defrule pen7-overruled-dot-gen223 ( declare ( salience ( + 1000 ( calc-defeasible-priority -2 [pen7] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen194 ) ( is-a fine ) ( value 3000 ) ( negative-support $?gen197 ) ( negative-overruled $?gen198 & : ( subseq-pos ( create$ pen7-overruled $?gen197 $$$ $?gen198 ) ) ) ) ( test ( eq ( class ?gen194 ) fine ) ) ( not ( and ( object ( name ?gen201 ) ( is-a threat_offense_factor ) ( defendant ?Defendant ) ( positive ?gen200 & : ( >= ?gen200 1 ) ) ) ( object ( name ?gen194 ) ( is-a fine ) ( positive-defeated $?gen196 & : ( not ( member$ pen7 $?gen196 ) ) ) ) ) ) ( test ( neq $?gen197 (create$) ) ) ( not ( object ( name ?gen194 ) ( is-a fine ) ( negative-overruled $?gen199 & : ( eq $?gen199 ( delete-member$ $?gen198 ( create$ pen7-overruled $?gen197 ) ) ) ) ) ) ( test ( instance-existp ?gen194 ) ) => ( bind $?gen199 ( delete-member$ $?gen198 ( create$ pen7-overruled $?gen197 ) ) ) ( message-modify-instance ?gen194 ( negative-overruled $?gen199 ) ) )
( defrule pen7-overruled-gen225 ( declare ( salience ( + 1000 ( calc-defeasible-priority 2 [pen7] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen201 ) ( is-a threat_offense_factor ) ( defendant ?Defendant ) ( positive ?gen200 & : ( >= ?gen200 1 ) ) ) ( object ( name ?gen194 ) ( is-a fine ) ( value 3000 ) ( negative-support $?gen197 ) ( negative-overruled $?gen198 & : ( not ( subseq-pos ( create$ pen7-overruled $?gen197 $$$ $?gen198 ) ) ) ) ( positive-defeated $?gen196 & : ( not ( member$ pen7 $?gen196 ) ) ) ) ( test ( eq ( class ?gen194 ) fine ) ) ( test ( and ( neq ?Defendant nil ) ( neq $?gen197 (create$) ) ) ) ( not ( object ( name ?gen194 ) ( is-a fine ) ( negative-overruled $?gen199 & : ( eq $?gen199 ( create$ pen7-overruled $?gen197 $?gen198 ) ) ) ) ) ( test ( instance-existp ?gen194 ) ) => ( bind $?gen199 ( create$ pen7-overruled $?gen197 $?gen198 ) ) ( message-modify-instance ?gen194 ( negative-overruled $?gen199 ) ) )
( defrule pen7-support-gen227 ( declare ( salience ( + 1000 ( calc-defeasible-priority 5 [pen7] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen193 ) ( is-a threat_offense_factor ) ( defendant ?Defendant ) ) ( object ( name ?gen194 ) ( is-a fine ) ( value 3000 ) ( positive-support $?gen196 & : ( not ( subseq-pos ( create$ pen7 ?gen193 $$$ $?gen196 ) ) ) ) ) ( test ( eq ( class ?gen194 ) fine ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen194 ) ( is-a fine ) ( positive-support $?gen199 & : ( eq $?gen199 ( create$ pen7 ?gen193 $?gen196 ) ) ) ) ) ( test ( instance-existp ?gen194 ) ) => ( bind $?gen199 ( create$ pen7 ?gen193 $?gen196 ) ) ( message-modify-instance ?gen194 ( positive-support $?gen199 ) ) )
( defrule pen6-defeasibly-dot-gen229 ( declare ( salience ( + 1000 ( calc-defeasible-priority -1 [pen6] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen185 ) ( is-a fine ) ( value 2000 ) ( positive 1 ) ( positive-derivator pen6 $? ) ) ( test ( eq ( class ?gen185 ) fine ) ) ( not ( and ( object ( name ?gen192 ) ( is-a light_offense_factor ) ( defendant ?Defendant ) ( positive ?gen191 & : ( >= ?gen191 1 ) ) ) ( object ( name ?gen185 ) ( is-a fine ) ( negative ~ 2 ) ( positive-overruled $?gen187 & : ( not ( member$ pen6 $?gen187 ) ) ) ) ) )  ( not ( object ( name ?gen185 ) ( is-a fine ) ( positive 0 ) ) ) ( test ( instance-existp ?gen185 ) ) => ( message-modify-instance ?gen185 ( positive 0 ) ) )
( defrule pen6-defeasibly-gen231 ( declare ( salience ( + 1000 ( calc-defeasible-priority 1 [pen6] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen192 ) ( is-a light_offense_factor ) ( defendant ?Defendant ) ( positive ?gen191 & : ( >= ?gen191 1 ) ) ) ( object ( name ?gen185 ) ( is-a fine ) ( value 2000 ) ( positive 0 ) ( negative ~ 2 ) ( positive-overruled $?gen187 & : ( not ( member$ pen6 $?gen187 ) ) ) ) ( test ( eq ( class ?gen185 ) fine ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen185 ) ( is-a fine ) ( positive 1 ) ( positive-derivator pen6 ?gen192 ) ) ) ( test ( instance-existp ?gen185 ) ) => ( message-modify-instance ?gen185 ( positive 1 ) ( positive-derivator pen6 ?gen192 ) ) )
( defrule pen6-overruled-dot-gen233 ( declare ( salience ( + 1000 ( calc-defeasible-priority -2 [pen6] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen185 ) ( is-a fine ) ( value 2000 ) ( negative-support $?gen188 ) ( negative-overruled $?gen189 & : ( subseq-pos ( create$ pen6-overruled $?gen188 $$$ $?gen189 ) ) ) ) ( test ( eq ( class ?gen185 ) fine ) ) ( not ( and ( object ( name ?gen192 ) ( is-a light_offense_factor ) ( defendant ?Defendant ) ( positive ?gen191 & : ( >= ?gen191 1 ) ) ) ( object ( name ?gen185 ) ( is-a fine ) ( positive-defeated $?gen187 & : ( not ( member$ pen6 $?gen187 ) ) ) ) ) ) ( test ( neq $?gen188 (create$) ) ) ( not ( object ( name ?gen185 ) ( is-a fine ) ( negative-overruled $?gen190 & : ( eq $?gen190 ( delete-member$ $?gen189 ( create$ pen6-overruled $?gen188 ) ) ) ) ) ) ( test ( instance-existp ?gen185 ) ) => ( bind $?gen190 ( delete-member$ $?gen189 ( create$ pen6-overruled $?gen188 ) ) ) ( message-modify-instance ?gen185 ( negative-overruled $?gen190 ) ) )
( defrule pen6-overruled-gen235 ( declare ( salience ( + 1000 ( calc-defeasible-priority 2 [pen6] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen192 ) ( is-a light_offense_factor ) ( defendant ?Defendant ) ( positive ?gen191 & : ( >= ?gen191 1 ) ) ) ( object ( name ?gen185 ) ( is-a fine ) ( value 2000 ) ( negative-support $?gen188 ) ( negative-overruled $?gen189 & : ( not ( subseq-pos ( create$ pen6-overruled $?gen188 $$$ $?gen189 ) ) ) ) ( positive-defeated $?gen187 & : ( not ( member$ pen6 $?gen187 ) ) ) ) ( test ( eq ( class ?gen185 ) fine ) ) ( test ( and ( neq ?Defendant nil ) ( neq $?gen188 (create$) ) ) ) ( not ( object ( name ?gen185 ) ( is-a fine ) ( negative-overruled $?gen190 & : ( eq $?gen190 ( create$ pen6-overruled $?gen188 $?gen189 ) ) ) ) ) ( test ( instance-existp ?gen185 ) ) => ( bind $?gen190 ( create$ pen6-overruled $?gen188 $?gen189 ) ) ( message-modify-instance ?gen185 ( negative-overruled $?gen190 ) ) )
( defrule pen6-support-gen237 ( declare ( salience ( + 1000 ( calc-defeasible-priority 5 [pen6] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen184 ) ( is-a light_offense_factor ) ( defendant ?Defendant ) ) ( object ( name ?gen185 ) ( is-a fine ) ( value 2000 ) ( positive-support $?gen187 & : ( not ( subseq-pos ( create$ pen6 ?gen184 $$$ $?gen187 ) ) ) ) ) ( test ( eq ( class ?gen185 ) fine ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen185 ) ( is-a fine ) ( positive-support $?gen190 & : ( eq $?gen190 ( create$ pen6 ?gen184 $?gen187 ) ) ) ) ) ( test ( instance-existp ?gen185 ) ) => ( bind $?gen190 ( create$ pen6 ?gen184 $?gen187 ) ) ( message-modify-instance ?gen185 ( positive-support $?gen190 ) ) )
( defrule pen5-defeasibly-dot-gen239 ( declare ( salience ( + 1000 ( calc-defeasible-priority -1 [pen5] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen176 ) ( is-a imprisonment ) ( value 24 ) ( positive 1 ) ( positive-derivator pen5 $? ) ) ( test ( eq ( class ?gen176 ) imprisonment ) ) ( not ( and ( object ( name ?gen183 ) ( is-a multiple_victims_factor ) ( defendant ?Defendant ) ( positive ?gen182 & : ( >= ?gen182 1 ) ) ) ( object ( name ?gen176 ) ( is-a imprisonment ) ( negative ~ 2 ) ( positive-overruled $?gen178 & : ( not ( member$ pen5 $?gen178 ) ) ) ) ) )  ( not ( object ( name ?gen176 ) ( is-a imprisonment ) ( positive 0 ) ) ) ( test ( instance-existp ?gen176 ) ) => ( message-modify-instance ?gen176 ( positive 0 ) ) )
( defrule pen5-defeasibly-gen241 ( declare ( salience ( + 1000 ( calc-defeasible-priority 1 [pen5] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen183 ) ( is-a multiple_victims_factor ) ( defendant ?Defendant ) ( positive ?gen182 & : ( >= ?gen182 1 ) ) ) ( object ( name ?gen176 ) ( is-a imprisonment ) ( value 24 ) ( positive 0 ) ( negative ~ 2 ) ( positive-overruled $?gen178 & : ( not ( member$ pen5 $?gen178 ) ) ) ) ( test ( eq ( class ?gen176 ) imprisonment ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen176 ) ( is-a imprisonment ) ( positive 1 ) ( positive-derivator pen5 ?gen183 ) ) ) ( test ( instance-existp ?gen176 ) ) => ( message-modify-instance ?gen176 ( positive 1 ) ( positive-derivator pen5 ?gen183 ) ) )
( defrule pen5-overruled-dot-gen243 ( declare ( salience ( + 1000 ( calc-defeasible-priority -2 [pen5] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen176 ) ( is-a imprisonment ) ( value 24 ) ( negative-support $?gen179 ) ( negative-overruled $?gen180 & : ( subseq-pos ( create$ pen5-overruled $?gen179 $$$ $?gen180 ) ) ) ) ( test ( eq ( class ?gen176 ) imprisonment ) ) ( not ( and ( object ( name ?gen183 ) ( is-a multiple_victims_factor ) ( defendant ?Defendant ) ( positive ?gen182 & : ( >= ?gen182 1 ) ) ) ( object ( name ?gen176 ) ( is-a imprisonment ) ( positive-defeated $?gen178 & : ( not ( member$ pen5 $?gen178 ) ) ) ) ) ) ( test ( neq $?gen179 (create$) ) ) ( not ( object ( name ?gen176 ) ( is-a imprisonment ) ( negative-overruled $?gen181 & : ( eq $?gen181 ( delete-member$ $?gen180 ( create$ pen5-overruled $?gen179 ) ) ) ) ) ) ( test ( instance-existp ?gen176 ) ) => ( bind $?gen181 ( delete-member$ $?gen180 ( create$ pen5-overruled $?gen179 ) ) ) ( message-modify-instance ?gen176 ( negative-overruled $?gen181 ) ) )
( defrule pen5-overruled-gen245 ( declare ( salience ( + 1000 ( calc-defeasible-priority 2 [pen5] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen183 ) ( is-a multiple_victims_factor ) ( defendant ?Defendant ) ( positive ?gen182 & : ( >= ?gen182 1 ) ) ) ( object ( name ?gen176 ) ( is-a imprisonment ) ( value 24 ) ( negative-support $?gen179 ) ( negative-overruled $?gen180 & : ( not ( subseq-pos ( create$ pen5-overruled $?gen179 $$$ $?gen180 ) ) ) ) ( positive-defeated $?gen178 & : ( not ( member$ pen5 $?gen178 ) ) ) ) ( test ( eq ( class ?gen176 ) imprisonment ) ) ( test ( and ( neq ?Defendant nil ) ( neq $?gen179 (create$) ) ) ) ( not ( object ( name ?gen176 ) ( is-a imprisonment ) ( negative-overruled $?gen181 & : ( eq $?gen181 ( create$ pen5-overruled $?gen179 $?gen180 ) ) ) ) ) ( test ( instance-existp ?gen176 ) ) => ( bind $?gen181 ( create$ pen5-overruled $?gen179 $?gen180 ) ) ( message-modify-instance ?gen176 ( negative-overruled $?gen181 ) ) )
( defrule pen5-support-gen247 ( declare ( salience ( + 1000 ( calc-defeasible-priority 5 [pen5] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen175 ) ( is-a multiple_victims_factor ) ( defendant ?Defendant ) ) ( object ( name ?gen176 ) ( is-a imprisonment ) ( value 24 ) ( positive-support $?gen178 & : ( not ( subseq-pos ( create$ pen5 ?gen175 $$$ $?gen178 ) ) ) ) ) ( test ( eq ( class ?gen176 ) imprisonment ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen176 ) ( is-a imprisonment ) ( positive-support $?gen181 & : ( eq $?gen181 ( create$ pen5 ?gen175 $?gen178 ) ) ) ) ) ( test ( instance-existp ?gen176 ) ) => ( bind $?gen181 ( create$ pen5 ?gen175 $?gen178 ) ) ( message-modify-instance ?gen176 ( positive-support $?gen181 ) ) )
( defrule pen3-defeasibly-dot-gen249 ( declare ( salience ( + 1000 ( calc-defeasible-priority -1 [pen3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen167 ) ( is-a fine ) ( value 10000 ) ( positive 1 ) ( positive-derivator pen3 $? ) ) ( test ( eq ( class ?gen167 ) fine ) ) ( not ( and ( object ( name ?gen174 ) ( is-a recidivist_factor ) ( defendant ?Defendant ) ( positive ?gen173 & : ( >= ?gen173 1 ) ) ) ( object ( name ?gen167 ) ( is-a fine ) ( negative ~ 2 ) ( positive-overruled $?gen169 & : ( not ( member$ pen3 $?gen169 ) ) ) ) ) )  ( not ( object ( name ?gen167 ) ( is-a fine ) ( positive 0 ) ) ) ( test ( instance-existp ?gen167 ) ) => ( message-modify-instance ?gen167 ( positive 0 ) ) )
( defrule pen3-defeasibly-gen251 ( declare ( salience ( + 1000 ( calc-defeasible-priority 1 [pen3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen174 ) ( is-a recidivist_factor ) ( defendant ?Defendant ) ( positive ?gen173 & : ( >= ?gen173 1 ) ) ) ( object ( name ?gen167 ) ( is-a fine ) ( value 10000 ) ( positive 0 ) ( negative ~ 2 ) ( positive-overruled $?gen169 & : ( not ( member$ pen3 $?gen169 ) ) ) ) ( test ( eq ( class ?gen167 ) fine ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen167 ) ( is-a fine ) ( positive 1 ) ( positive-derivator pen3 ?gen174 ) ) ) ( test ( instance-existp ?gen167 ) ) => ( message-modify-instance ?gen167 ( positive 1 ) ( positive-derivator pen3 ?gen174 ) ) )
( defrule pen3-overruled-dot-gen253 ( declare ( salience ( + 1000 ( calc-defeasible-priority -2 [pen3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen167 ) ( is-a fine ) ( value 10000 ) ( negative-support $?gen170 ) ( negative-overruled $?gen171 & : ( subseq-pos ( create$ pen3-overruled $?gen170 $$$ $?gen171 ) ) ) ) ( test ( eq ( class ?gen167 ) fine ) ) ( not ( and ( object ( name ?gen174 ) ( is-a recidivist_factor ) ( defendant ?Defendant ) ( positive ?gen173 & : ( >= ?gen173 1 ) ) ) ( object ( name ?gen167 ) ( is-a fine ) ( positive-defeated $?gen169 & : ( not ( member$ pen3 $?gen169 ) ) ) ) ) ) ( test ( neq $?gen170 (create$) ) ) ( not ( object ( name ?gen167 ) ( is-a fine ) ( negative-overruled $?gen172 & : ( eq $?gen172 ( delete-member$ $?gen171 ( create$ pen3-overruled $?gen170 ) ) ) ) ) ) ( test ( instance-existp ?gen167 ) ) => ( bind $?gen172 ( delete-member$ $?gen171 ( create$ pen3-overruled $?gen170 ) ) ) ( message-modify-instance ?gen167 ( negative-overruled $?gen172 ) ) )
( defrule pen3-overruled-gen255 ( declare ( salience ( + 1000 ( calc-defeasible-priority 2 [pen3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen174 ) ( is-a recidivist_factor ) ( defendant ?Defendant ) ( positive ?gen173 & : ( >= ?gen173 1 ) ) ) ( object ( name ?gen167 ) ( is-a fine ) ( value 10000 ) ( negative-support $?gen170 ) ( negative-overruled $?gen171 & : ( not ( subseq-pos ( create$ pen3-overruled $?gen170 $$$ $?gen171 ) ) ) ) ( positive-defeated $?gen169 & : ( not ( member$ pen3 $?gen169 ) ) ) ) ( test ( eq ( class ?gen167 ) fine ) ) ( test ( and ( neq ?Defendant nil ) ( neq $?gen170 (create$) ) ) ) ( not ( object ( name ?gen167 ) ( is-a fine ) ( negative-overruled $?gen172 & : ( eq $?gen172 ( create$ pen3-overruled $?gen170 $?gen171 ) ) ) ) ) ( test ( instance-existp ?gen167 ) ) => ( bind $?gen172 ( create$ pen3-overruled $?gen170 $?gen171 ) ) ( message-modify-instance ?gen167 ( negative-overruled $?gen172 ) ) )
( defrule pen3-support-gen257 ( declare ( salience ( + 1000 ( calc-defeasible-priority 5 [pen3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen166 ) ( is-a recidivist_factor ) ( defendant ?Defendant ) ) ( object ( name ?gen167 ) ( is-a fine ) ( value 10000 ) ( positive-support $?gen169 & : ( not ( subseq-pos ( create$ pen3 ?gen166 $$$ $?gen169 ) ) ) ) ) ( test ( eq ( class ?gen167 ) fine ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen167 ) ( is-a fine ) ( positive-support $?gen172 & : ( eq $?gen172 ( create$ pen3 ?gen166 $?gen169 ) ) ) ) ) ( test ( instance-existp ?gen167 ) ) => ( bind $?gen172 ( create$ pen3 ?gen166 $?gen169 ) ) ( message-modify-instance ?gen167 ( positive-support $?gen172 ) ) )
( defrule pen4-defeasibly-dot-gen259 ( declare ( salience ( + 1000 ( calc-defeasible-priority -1 [pen4] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen158 ) ( is-a imprisonment ) ( value 12 ) ( positive 1 ) ( positive-derivator pen4 $? ) ) ( test ( eq ( class ?gen158 ) imprisonment ) ) ( not ( and ( object ( name ?gen165 ) ( is-a child_victim_factor ) ( defendant ?Defendant ) ( positive ?gen164 & : ( >= ?gen164 1 ) ) ) ( object ( name ?gen158 ) ( is-a imprisonment ) ( negative ~ 2 ) ( positive-overruled $?gen160 & : ( not ( member$ pen4 $?gen160 ) ) ) ) ) )  ( not ( object ( name ?gen158 ) ( is-a imprisonment ) ( positive 0 ) ) ) ( test ( instance-existp ?gen158 ) ) => ( message-modify-instance ?gen158 ( positive 0 ) ) )
( defrule pen4-defeasibly-gen261 ( declare ( salience ( + 1000 ( calc-defeasible-priority 1 [pen4] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen165 ) ( is-a child_victim_factor ) ( defendant ?Defendant ) ( positive ?gen164 & : ( >= ?gen164 1 ) ) ) ( object ( name ?gen158 ) ( is-a imprisonment ) ( value 12 ) ( positive 0 ) ( negative ~ 2 ) ( positive-overruled $?gen160 & : ( not ( member$ pen4 $?gen160 ) ) ) ) ( test ( eq ( class ?gen158 ) imprisonment ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen158 ) ( is-a imprisonment ) ( positive 1 ) ( positive-derivator pen4 ?gen165 ) ) ) ( test ( instance-existp ?gen158 ) ) => ( message-modify-instance ?gen158 ( positive 1 ) ( positive-derivator pen4 ?gen165 ) ) )
( defrule pen4-overruled-dot-gen263 ( declare ( salience ( + 1000 ( calc-defeasible-priority -2 [pen4] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen158 ) ( is-a imprisonment ) ( value 12 ) ( negative-support $?gen161 ) ( negative-overruled $?gen162 & : ( subseq-pos ( create$ pen4-overruled $?gen161 $$$ $?gen162 ) ) ) ) ( test ( eq ( class ?gen158 ) imprisonment ) ) ( not ( and ( object ( name ?gen165 ) ( is-a child_victim_factor ) ( defendant ?Defendant ) ( positive ?gen164 & : ( >= ?gen164 1 ) ) ) ( object ( name ?gen158 ) ( is-a imprisonment ) ( positive-defeated $?gen160 & : ( not ( member$ pen4 $?gen160 ) ) ) ) ) ) ( test ( neq $?gen161 (create$) ) ) ( not ( object ( name ?gen158 ) ( is-a imprisonment ) ( negative-overruled $?gen163 & : ( eq $?gen163 ( delete-member$ $?gen162 ( create$ pen4-overruled $?gen161 ) ) ) ) ) ) ( test ( instance-existp ?gen158 ) ) => ( bind $?gen163 ( delete-member$ $?gen162 ( create$ pen4-overruled $?gen161 ) ) ) ( message-modify-instance ?gen158 ( negative-overruled $?gen163 ) ) )
( defrule pen4-overruled-gen265 ( declare ( salience ( + 1000 ( calc-defeasible-priority 2 [pen4] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen165 ) ( is-a child_victim_factor ) ( defendant ?Defendant ) ( positive ?gen164 & : ( >= ?gen164 1 ) ) ) ( object ( name ?gen158 ) ( is-a imprisonment ) ( value 12 ) ( negative-support $?gen161 ) ( negative-overruled $?gen162 & : ( not ( subseq-pos ( create$ pen4-overruled $?gen161 $$$ $?gen162 ) ) ) ) ( positive-defeated $?gen160 & : ( not ( member$ pen4 $?gen160 ) ) ) ) ( test ( eq ( class ?gen158 ) imprisonment ) ) ( test ( and ( neq ?Defendant nil ) ( neq $?gen161 (create$) ) ) ) ( not ( object ( name ?gen158 ) ( is-a imprisonment ) ( negative-overruled $?gen163 & : ( eq $?gen163 ( create$ pen4-overruled $?gen161 $?gen162 ) ) ) ) ) ( test ( instance-existp ?gen158 ) ) => ( bind $?gen163 ( create$ pen4-overruled $?gen161 $?gen162 ) ) ( message-modify-instance ?gen158 ( negative-overruled $?gen163 ) ) )
( defrule pen4-support-gen267 ( declare ( salience ( + 1000 ( calc-defeasible-priority 5 [pen4] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen157 ) ( is-a child_victim_factor ) ( defendant ?Defendant ) ) ( object ( name ?gen158 ) ( is-a imprisonment ) ( value 12 ) ( positive-support $?gen160 & : ( not ( subseq-pos ( create$ pen4 ?gen157 $$$ $?gen160 ) ) ) ) ) ( test ( eq ( class ?gen158 ) imprisonment ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen158 ) ( is-a imprisonment ) ( positive-support $?gen163 & : ( eq $?gen163 ( create$ pen4 ?gen157 $?gen160 ) ) ) ) ) ( test ( instance-existp ?gen158 ) ) => ( bind $?gen163 ( create$ pen4 ?gen157 $?gen160 ) ) ( message-modify-instance ?gen158 ( positive-support $?gen163 ) ) )
( defrule pen3-defeasibly-dot-gen269 ( declare ( salience ( + 1000 ( calc-defeasible-priority -1 [pen3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen149 ) ( is-a fine ) ( value 10000 ) ( positive 1 ) ( positive-derivator pen3 $? ) ) ( test ( eq ( class ?gen149 ) fine ) ) ( not ( and ( object ( name ?gen156 ) ( is-a family_offense_factor ) ( defendant ?Defendant ) ( positive ?gen155 & : ( >= ?gen155 1 ) ) ) ( object ( name ?gen149 ) ( is-a fine ) ( negative ~ 2 ) ( positive-overruled $?gen151 & : ( not ( member$ pen3 $?gen151 ) ) ) ) ) )  ( not ( object ( name ?gen149 ) ( is-a fine ) ( positive 0 ) ) ) ( test ( instance-existp ?gen149 ) ) => ( message-modify-instance ?gen149 ( positive 0 ) ) )
( defrule pen3-defeasibly-gen271 ( declare ( salience ( + 1000 ( calc-defeasible-priority 1 [pen3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen156 ) ( is-a family_offense_factor ) ( defendant ?Defendant ) ( positive ?gen155 & : ( >= ?gen155 1 ) ) ) ( object ( name ?gen149 ) ( is-a fine ) ( value 10000 ) ( positive 0 ) ( negative ~ 2 ) ( positive-overruled $?gen151 & : ( not ( member$ pen3 $?gen151 ) ) ) ) ( test ( eq ( class ?gen149 ) fine ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen149 ) ( is-a fine ) ( positive 1 ) ( positive-derivator pen3 ?gen156 ) ) ) ( test ( instance-existp ?gen149 ) ) => ( message-modify-instance ?gen149 ( positive 1 ) ( positive-derivator pen3 ?gen156 ) ) )
( defrule pen3-overruled-dot-gen273 ( declare ( salience ( + 1000 ( calc-defeasible-priority -2 [pen3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen149 ) ( is-a fine ) ( value 10000 ) ( negative-support $?gen152 ) ( negative-overruled $?gen153 & : ( subseq-pos ( create$ pen3-overruled $?gen152 $$$ $?gen153 ) ) ) ) ( test ( eq ( class ?gen149 ) fine ) ) ( not ( and ( object ( name ?gen156 ) ( is-a family_offense_factor ) ( defendant ?Defendant ) ( positive ?gen155 & : ( >= ?gen155 1 ) ) ) ( object ( name ?gen149 ) ( is-a fine ) ( positive-defeated $?gen151 & : ( not ( member$ pen3 $?gen151 ) ) ) ) ) ) ( test ( neq $?gen152 (create$) ) ) ( not ( object ( name ?gen149 ) ( is-a fine ) ( negative-overruled $?gen154 & : ( eq $?gen154 ( delete-member$ $?gen153 ( create$ pen3-overruled $?gen152 ) ) ) ) ) ) ( test ( instance-existp ?gen149 ) ) => ( bind $?gen154 ( delete-member$ $?gen153 ( create$ pen3-overruled $?gen152 ) ) ) ( message-modify-instance ?gen149 ( negative-overruled $?gen154 ) ) )
( defrule pen3-overruled-gen275 ( declare ( salience ( + 1000 ( calc-defeasible-priority 2 [pen3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen156 ) ( is-a family_offense_factor ) ( defendant ?Defendant ) ( positive ?gen155 & : ( >= ?gen155 1 ) ) ) ( object ( name ?gen149 ) ( is-a fine ) ( value 10000 ) ( negative-support $?gen152 ) ( negative-overruled $?gen153 & : ( not ( subseq-pos ( create$ pen3-overruled $?gen152 $$$ $?gen153 ) ) ) ) ( positive-defeated $?gen151 & : ( not ( member$ pen3 $?gen151 ) ) ) ) ( test ( eq ( class ?gen149 ) fine ) ) ( test ( and ( neq ?Defendant nil ) ( neq $?gen152 (create$) ) ) ) ( not ( object ( name ?gen149 ) ( is-a fine ) ( negative-overruled $?gen154 & : ( eq $?gen154 ( create$ pen3-overruled $?gen152 $?gen153 ) ) ) ) ) ( test ( instance-existp ?gen149 ) ) => ( bind $?gen154 ( create$ pen3-overruled $?gen152 $?gen153 ) ) ( message-modify-instance ?gen149 ( negative-overruled $?gen154 ) ) )
( defrule pen3-support-gen277 ( declare ( salience ( + 1000 ( calc-defeasible-priority 5 [pen3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen148 ) ( is-a family_offense_factor ) ( defendant ?Defendant ) ) ( object ( name ?gen149 ) ( is-a fine ) ( value 10000 ) ( positive-support $?gen151 & : ( not ( subseq-pos ( create$ pen3 ?gen148 $$$ $?gen151 ) ) ) ) ) ( test ( eq ( class ?gen149 ) fine ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen149 ) ( is-a fine ) ( positive-support $?gen154 & : ( eq $?gen154 ( create$ pen3 ?gen148 $?gen151 ) ) ) ) ) ( test ( instance-existp ?gen149 ) ) => ( bind $?gen154 ( create$ pen3 ?gen148 $?gen151 ) ) ( message-modify-instance ?gen149 ( positive-support $?gen154 ) ) )
( defrule pen3-defeasibly-dot-gen279 ( declare ( salience ( + 1000 ( calc-defeasible-priority -1 [pen3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen140 ) ( is-a fine ) ( value 10000 ) ( positive 1 ) ( positive-derivator pen3 $? ) ) ( test ( eq ( class ?gen140 ) fine ) ) ( not ( and ( object ( name ?gen147 ) ( is-a weapon_factor ) ( defendant ?Defendant ) ( positive ?gen146 & : ( >= ?gen146 1 ) ) ) ( object ( name ?gen140 ) ( is-a fine ) ( negative ~ 2 ) ( positive-overruled $?gen142 & : ( not ( member$ pen3 $?gen142 ) ) ) ) ) )  ( not ( object ( name ?gen140 ) ( is-a fine ) ( positive 0 ) ) ) ( test ( instance-existp ?gen140 ) ) => ( message-modify-instance ?gen140 ( positive 0 ) ) )
( defrule pen3-defeasibly-gen281 ( declare ( salience ( + 1000 ( calc-defeasible-priority 1 [pen3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen147 ) ( is-a weapon_factor ) ( defendant ?Defendant ) ( positive ?gen146 & : ( >= ?gen146 1 ) ) ) ( object ( name ?gen140 ) ( is-a fine ) ( value 10000 ) ( positive 0 ) ( negative ~ 2 ) ( positive-overruled $?gen142 & : ( not ( member$ pen3 $?gen142 ) ) ) ) ( test ( eq ( class ?gen140 ) fine ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen140 ) ( is-a fine ) ( positive 1 ) ( positive-derivator pen3 ?gen147 ) ) ) ( test ( instance-existp ?gen140 ) ) => ( message-modify-instance ?gen140 ( positive 1 ) ( positive-derivator pen3 ?gen147 ) ) )
( defrule pen3-overruled-dot-gen283 ( declare ( salience ( + 1000 ( calc-defeasible-priority -2 [pen3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen140 ) ( is-a fine ) ( value 10000 ) ( negative-support $?gen143 ) ( negative-overruled $?gen144 & : ( subseq-pos ( create$ pen3-overruled $?gen143 $$$ $?gen144 ) ) ) ) ( test ( eq ( class ?gen140 ) fine ) ) ( not ( and ( object ( name ?gen147 ) ( is-a weapon_factor ) ( defendant ?Defendant ) ( positive ?gen146 & : ( >= ?gen146 1 ) ) ) ( object ( name ?gen140 ) ( is-a fine ) ( positive-defeated $?gen142 & : ( not ( member$ pen3 $?gen142 ) ) ) ) ) ) ( test ( neq $?gen143 (create$) ) ) ( not ( object ( name ?gen140 ) ( is-a fine ) ( negative-overruled $?gen145 & : ( eq $?gen145 ( delete-member$ $?gen144 ( create$ pen3-overruled $?gen143 ) ) ) ) ) ) ( test ( instance-existp ?gen140 ) ) => ( bind $?gen145 ( delete-member$ $?gen144 ( create$ pen3-overruled $?gen143 ) ) ) ( message-modify-instance ?gen140 ( negative-overruled $?gen145 ) ) )
( defrule pen3-overruled-gen285 ( declare ( salience ( + 1000 ( calc-defeasible-priority 2 [pen3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen147 ) ( is-a weapon_factor ) ( defendant ?Defendant ) ( positive ?gen146 & : ( >= ?gen146 1 ) ) ) ( object ( name ?gen140 ) ( is-a fine ) ( value 10000 ) ( negative-support $?gen143 ) ( negative-overruled $?gen144 & : ( not ( subseq-pos ( create$ pen3-overruled $?gen143 $$$ $?gen144 ) ) ) ) ( positive-defeated $?gen142 & : ( not ( member$ pen3 $?gen142 ) ) ) ) ( test ( eq ( class ?gen140 ) fine ) ) ( test ( and ( neq ?Defendant nil ) ( neq $?gen143 (create$) ) ) ) ( not ( object ( name ?gen140 ) ( is-a fine ) ( negative-overruled $?gen145 & : ( eq $?gen145 ( create$ pen3-overruled $?gen143 $?gen144 ) ) ) ) ) ( test ( instance-existp ?gen140 ) ) => ( bind $?gen145 ( create$ pen3-overruled $?gen143 $?gen144 ) ) ( message-modify-instance ?gen140 ( negative-overruled $?gen145 ) ) )
( defrule pen3-support-gen287 ( declare ( salience ( + 1000 ( calc-defeasible-priority 5 [pen3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen139 ) ( is-a weapon_factor ) ( defendant ?Defendant ) ) ( object ( name ?gen140 ) ( is-a fine ) ( value 10000 ) ( positive-support $?gen142 & : ( not ( subseq-pos ( create$ pen3 ?gen139 $$$ $?gen142 ) ) ) ) ) ( test ( eq ( class ?gen140 ) fine ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen140 ) ( is-a fine ) ( positive-support $?gen145 & : ( eq $?gen145 ( create$ pen3 ?gen139 $?gen142 ) ) ) ) ) ( test ( instance-existp ?gen140 ) ) => ( bind $?gen145 ( create$ pen3 ?gen139 $?gen142 ) ) ( message-modify-instance ?gen140 ( positive-support $?gen145 ) ) )
( defrule pen3-defeasibly-dot-gen289 ( declare ( salience ( + 1000 ( calc-defeasible-priority -1 [pen3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen131 ) ( is-a fine ) ( value 10000 ) ( positive 1 ) ( positive-derivator pen3 $? ) ) ( test ( eq ( class ?gen131 ) fine ) ) ( not ( and ( object ( name ?gen138 ) ( is-a aggravating_factor ) ( defendant ?Defendant ) ( positive ?gen137 & : ( >= ?gen137 1 ) ) ) ( object ( name ?gen131 ) ( is-a fine ) ( negative ~ 2 ) ( positive-overruled $?gen133 & : ( not ( member$ pen3 $?gen133 ) ) ) ) ) )  ( not ( object ( name ?gen131 ) ( is-a fine ) ( positive 0 ) ) ) ( test ( instance-existp ?gen131 ) ) => ( message-modify-instance ?gen131 ( positive 0 ) ) )
( defrule pen3-defeasibly-gen291 ( declare ( salience ( + 1000 ( calc-defeasible-priority 1 [pen3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen138 ) ( is-a aggravating_factor ) ( defendant ?Defendant ) ( positive ?gen137 & : ( >= ?gen137 1 ) ) ) ( object ( name ?gen131 ) ( is-a fine ) ( value 10000 ) ( positive 0 ) ( negative ~ 2 ) ( positive-overruled $?gen133 & : ( not ( member$ pen3 $?gen133 ) ) ) ) ( test ( eq ( class ?gen131 ) fine ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen131 ) ( is-a fine ) ( positive 1 ) ( positive-derivator pen3 ?gen138 ) ) ) ( test ( instance-existp ?gen131 ) ) => ( message-modify-instance ?gen131 ( positive 1 ) ( positive-derivator pen3 ?gen138 ) ) )
( defrule pen3-overruled-dot-gen293 ( declare ( salience ( + 1000 ( calc-defeasible-priority -2 [pen3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen131 ) ( is-a fine ) ( value 10000 ) ( negative-support $?gen134 ) ( negative-overruled $?gen135 & : ( subseq-pos ( create$ pen3-overruled $?gen134 $$$ $?gen135 ) ) ) ) ( test ( eq ( class ?gen131 ) fine ) ) ( not ( and ( object ( name ?gen138 ) ( is-a aggravating_factor ) ( defendant ?Defendant ) ( positive ?gen137 & : ( >= ?gen137 1 ) ) ) ( object ( name ?gen131 ) ( is-a fine ) ( positive-defeated $?gen133 & : ( not ( member$ pen3 $?gen133 ) ) ) ) ) ) ( test ( neq $?gen134 (create$) ) ) ( not ( object ( name ?gen131 ) ( is-a fine ) ( negative-overruled $?gen136 & : ( eq $?gen136 ( delete-member$ $?gen135 ( create$ pen3-overruled $?gen134 ) ) ) ) ) ) ( test ( instance-existp ?gen131 ) ) => ( bind $?gen136 ( delete-member$ $?gen135 ( create$ pen3-overruled $?gen134 ) ) ) ( message-modify-instance ?gen131 ( negative-overruled $?gen136 ) ) )
( defrule pen3-overruled-gen295 ( declare ( salience ( + 1000 ( calc-defeasible-priority 2 [pen3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen138 ) ( is-a aggravating_factor ) ( defendant ?Defendant ) ( positive ?gen137 & : ( >= ?gen137 1 ) ) ) ( object ( name ?gen131 ) ( is-a fine ) ( value 10000 ) ( negative-support $?gen134 ) ( negative-overruled $?gen135 & : ( not ( subseq-pos ( create$ pen3-overruled $?gen134 $$$ $?gen135 ) ) ) ) ( positive-defeated $?gen133 & : ( not ( member$ pen3 $?gen133 ) ) ) ) ( test ( eq ( class ?gen131 ) fine ) ) ( test ( and ( neq ?Defendant nil ) ( neq $?gen134 (create$) ) ) ) ( not ( object ( name ?gen131 ) ( is-a fine ) ( negative-overruled $?gen136 & : ( eq $?gen136 ( create$ pen3-overruled $?gen134 $?gen135 ) ) ) ) ) ( test ( instance-existp ?gen131 ) ) => ( bind $?gen136 ( create$ pen3-overruled $?gen134 $?gen135 ) ) ( message-modify-instance ?gen131 ( negative-overruled $?gen136 ) ) )
( defrule pen3-support-gen297 ( declare ( salience ( + 1000 ( calc-defeasible-priority 5 [pen3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen130 ) ( is-a aggravating_factor ) ( defendant ?Defendant ) ) ( object ( name ?gen131 ) ( is-a fine ) ( value 10000 ) ( positive-support $?gen133 & : ( not ( subseq-pos ( create$ pen3 ?gen130 $$$ $?gen133 ) ) ) ) ) ( test ( eq ( class ?gen131 ) fine ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen131 ) ( is-a fine ) ( positive-support $?gen136 & : ( eq $?gen136 ( create$ pen3 ?gen130 $?gen133 ) ) ) ) ) ( test ( instance-existp ?gen131 ) ) => ( bind $?gen136 ( create$ pen3 ?gen130 $?gen133 ) ) ( message-modify-instance ?gen131 ( positive-support $?gen136 ) ) )
( defrule pen2-defeasibly-dot-gen299 ( declare ( salience ( + 1000 ( calc-defeasible-priority -1 [pen2] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen122 ) ( is-a fine ) ( value 5000 ) ( positive 1 ) ( positive-derivator pen2 $? ) ) ( test ( eq ( class ?gen122 ) fine ) ) ( not ( and ( object ( name ?gen129 ) ( is-a increase_punishment ) ( defendant ?Defendant ) ( positive ?gen128 & : ( >= ?gen128 1 ) ) ) ( object ( name ?gen122 ) ( is-a fine ) ( negative ~ 2 ) ( positive-overruled $?gen124 & : ( not ( member$ pen2 $?gen124 ) ) ) ) ) )  ( not ( object ( name ?gen122 ) ( is-a fine ) ( positive 0 ) ) ) ( test ( instance-existp ?gen122 ) ) => ( message-modify-instance ?gen122 ( positive 0 ) ) )
( defrule pen2-defeasibly-gen301 ( declare ( salience ( + 1000 ( calc-defeasible-priority 1 [pen2] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen129 ) ( is-a increase_punishment ) ( defendant ?Defendant ) ( positive ?gen128 & : ( >= ?gen128 1 ) ) ) ( object ( name ?gen122 ) ( is-a fine ) ( value 5000 ) ( positive 0 ) ( negative ~ 2 ) ( positive-overruled $?gen124 & : ( not ( member$ pen2 $?gen124 ) ) ) ) ( test ( eq ( class ?gen122 ) fine ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen122 ) ( is-a fine ) ( positive 1 ) ( positive-derivator pen2 ?gen129 ) ) ) ( test ( instance-existp ?gen122 ) ) => ( message-modify-instance ?gen122 ( positive 1 ) ( positive-derivator pen2 ?gen129 ) ) )
( defrule pen2-overruled-dot-gen303 ( declare ( salience ( + 1000 ( calc-defeasible-priority -2 [pen2] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen122 ) ( is-a fine ) ( value 5000 ) ( negative-support $?gen125 ) ( negative-overruled $?gen126 & : ( subseq-pos ( create$ pen2-overruled $?gen125 $$$ $?gen126 ) ) ) ) ( test ( eq ( class ?gen122 ) fine ) ) ( not ( and ( object ( name ?gen129 ) ( is-a increase_punishment ) ( defendant ?Defendant ) ( positive ?gen128 & : ( >= ?gen128 1 ) ) ) ( object ( name ?gen122 ) ( is-a fine ) ( positive-defeated $?gen124 & : ( not ( member$ pen2 $?gen124 ) ) ) ) ) ) ( test ( neq $?gen125 (create$) ) ) ( not ( object ( name ?gen122 ) ( is-a fine ) ( negative-overruled $?gen127 & : ( eq $?gen127 ( delete-member$ $?gen126 ( create$ pen2-overruled $?gen125 ) ) ) ) ) ) ( test ( instance-existp ?gen122 ) ) => ( bind $?gen127 ( delete-member$ $?gen126 ( create$ pen2-overruled $?gen125 ) ) ) ( message-modify-instance ?gen122 ( negative-overruled $?gen127 ) ) )
( defrule pen2-overruled-gen305 ( declare ( salience ( + 1000 ( calc-defeasible-priority 2 [pen2] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen129 ) ( is-a increase_punishment ) ( defendant ?Defendant ) ( positive ?gen128 & : ( >= ?gen128 1 ) ) ) ( object ( name ?gen122 ) ( is-a fine ) ( value 5000 ) ( negative-support $?gen125 ) ( negative-overruled $?gen126 & : ( not ( subseq-pos ( create$ pen2-overruled $?gen125 $$$ $?gen126 ) ) ) ) ( positive-defeated $?gen124 & : ( not ( member$ pen2 $?gen124 ) ) ) ) ( test ( eq ( class ?gen122 ) fine ) ) ( test ( and ( neq ?Defendant nil ) ( neq $?gen125 (create$) ) ) ) ( not ( object ( name ?gen122 ) ( is-a fine ) ( negative-overruled $?gen127 & : ( eq $?gen127 ( create$ pen2-overruled $?gen125 $?gen126 ) ) ) ) ) ( test ( instance-existp ?gen122 ) ) => ( bind $?gen127 ( create$ pen2-overruled $?gen125 $?gen126 ) ) ( message-modify-instance ?gen122 ( negative-overruled $?gen127 ) ) )
( defrule pen2-support-gen307 ( declare ( salience ( + 1000 ( calc-defeasible-priority 5 [pen2] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen121 ) ( is-a increase_punishment ) ( defendant ?Defendant ) ) ( object ( name ?gen122 ) ( is-a fine ) ( value 5000 ) ( positive-support $?gen124 & : ( not ( subseq-pos ( create$ pen2 ?gen121 $$$ $?gen124 ) ) ) ) ) ( test ( eq ( class ?gen122 ) fine ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen122 ) ( is-a fine ) ( positive-support $?gen127 & : ( eq $?gen127 ( create$ pen2 ?gen121 $?gen124 ) ) ) ) ) ( test ( instance-existp ?gen122 ) ) => ( bind $?gen127 ( create$ pen2 ?gen121 $?gen124 ) ) ( message-modify-instance ?gen122 ( positive-support $?gen127 ) ) )
( defrule pen1-defeasibly-dot-gen309 ( declare ( salience ( + 1000 ( calc-defeasible-priority -1 [pen1] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen113 ) ( is-a imprisonment ) ( value 6 ) ( positive 1 ) ( positive-derivator pen1 $? ) ) ( test ( eq ( class ?gen113 ) imprisonment ) ) ( not ( and ( object ( name ?gen120 ) ( is-a basic_punishment ) ( defendant ?Defendant ) ( positive ?gen119 & : ( >= ?gen119 1 ) ) ) ( object ( name ?gen113 ) ( is-a imprisonment ) ( negative ~ 2 ) ( positive-overruled $?gen115 & : ( not ( member$ pen1 $?gen115 ) ) ) ) ) )  ( not ( object ( name ?gen113 ) ( is-a imprisonment ) ( positive 0 ) ) ) ( test ( instance-existp ?gen113 ) ) => ( message-modify-instance ?gen113 ( positive 0 ) ) )
( defrule pen1-defeasibly-gen311 ( declare ( salience ( + 1000 ( calc-defeasible-priority 1 [pen1] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen120 ) ( is-a basic_punishment ) ( defendant ?Defendant ) ( positive ?gen119 & : ( >= ?gen119 1 ) ) ) ( object ( name ?gen113 ) ( is-a imprisonment ) ( value 6 ) ( positive 0 ) ( negative ~ 2 ) ( positive-overruled $?gen115 & : ( not ( member$ pen1 $?gen115 ) ) ) ) ( test ( eq ( class ?gen113 ) imprisonment ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen113 ) ( is-a imprisonment ) ( positive 1 ) ( positive-derivator pen1 ?gen120 ) ) ) ( test ( instance-existp ?gen113 ) ) => ( message-modify-instance ?gen113 ( positive 1 ) ( positive-derivator pen1 ?gen120 ) ) )
( defrule pen1-overruled-dot-gen313 ( declare ( salience ( + 1000 ( calc-defeasible-priority -2 [pen1] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen113 ) ( is-a imprisonment ) ( value 6 ) ( negative-support $?gen116 ) ( negative-overruled $?gen117 & : ( subseq-pos ( create$ pen1-overruled $?gen116 $$$ $?gen117 ) ) ) ) ( test ( eq ( class ?gen113 ) imprisonment ) ) ( not ( and ( object ( name ?gen120 ) ( is-a basic_punishment ) ( defendant ?Defendant ) ( positive ?gen119 & : ( >= ?gen119 1 ) ) ) ( object ( name ?gen113 ) ( is-a imprisonment ) ( positive-defeated $?gen115 & : ( not ( member$ pen1 $?gen115 ) ) ) ) ) ) ( test ( neq $?gen116 (create$) ) ) ( not ( object ( name ?gen113 ) ( is-a imprisonment ) ( negative-overruled $?gen118 & : ( eq $?gen118 ( delete-member$ $?gen117 ( create$ pen1-overruled $?gen116 ) ) ) ) ) ) ( test ( instance-existp ?gen113 ) ) => ( bind $?gen118 ( delete-member$ $?gen117 ( create$ pen1-overruled $?gen116 ) ) ) ( message-modify-instance ?gen113 ( negative-overruled $?gen118 ) ) )
( defrule pen1-overruled-gen315 ( declare ( salience ( + 1000 ( calc-defeasible-priority 2 [pen1] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen120 ) ( is-a basic_punishment ) ( defendant ?Defendant ) ( positive ?gen119 & : ( >= ?gen119 1 ) ) ) ( object ( name ?gen113 ) ( is-a imprisonment ) ( value 6 ) ( negative-support $?gen116 ) ( negative-overruled $?gen117 & : ( not ( subseq-pos ( create$ pen1-overruled $?gen116 $$$ $?gen117 ) ) ) ) ( positive-defeated $?gen115 & : ( not ( member$ pen1 $?gen115 ) ) ) ) ( test ( eq ( class ?gen113 ) imprisonment ) ) ( test ( and ( neq ?Defendant nil ) ( neq $?gen116 (create$) ) ) ) ( not ( object ( name ?gen113 ) ( is-a imprisonment ) ( negative-overruled $?gen118 & : ( eq $?gen118 ( create$ pen1-overruled $?gen116 $?gen117 ) ) ) ) ) ( test ( instance-existp ?gen113 ) ) => ( bind $?gen118 ( create$ pen1-overruled $?gen116 $?gen117 ) ) ( message-modify-instance ?gen113 ( negative-overruled $?gen118 ) ) )
( defrule pen1-support-gen317 ( declare ( salience ( + 1000 ( calc-defeasible-priority 5 [pen1] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen112 ) ( is-a basic_punishment ) ( defendant ?Defendant ) ) ( object ( name ?gen113 ) ( is-a imprisonment ) ( value 6 ) ( positive-support $?gen115 & : ( not ( subseq-pos ( create$ pen1 ?gen112 $$$ $?gen115 ) ) ) ) ) ( test ( eq ( class ?gen113 ) imprisonment ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen113 ) ( is-a imprisonment ) ( positive-support $?gen118 & : ( eq $?gen118 ( create$ pen1 ?gen112 $?gen115 ) ) ) ) ) ( test ( instance-existp ?gen113 ) ) => ( bind $?gen118 ( create$ pen1 ?gen112 $?gen115 ) ) ( message-modify-instance ?gen113 ( positive-support $?gen118 ) ) )
( defrule rule10-defeated-dot-gen319 ( declare ( salience ( + 1000 ( calc-defeasible-priority -3 [rule10] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen102 ) ( is-a threat_offense_factor ) ( defendant ?Defendant ) ( negative-defeated $?gen105 & : ( subseq-pos ( create$ rule10-defeated rule1 rule6 rule8 $$$ $?gen105 ) ) ) ) ( test ( eq ( class ?gen102 ) threat_offense_factor ) ) ( not ( and ( object ( name ?gen109 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:violenceNature "THREAT" ) ( positive ?gen108 & : ( >= ?gen108 1 ) ) ) ( object ( name ?gen111 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "NONE" ) ( positive ?gen110 & : ( >= ?gen110 1 ) ) ) ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen102 ) ( is-a threat_offense_factor ) ( negative-defeated $?gen104 & : ( eq $?gen104 ( delete-member$ $?gen105 ( create$ rule10-defeated rule1 rule6 rule8 ) ) ) ) ) ) ( test ( instance-existp ?gen102 ) ) => ( bind $?gen104 ( delete-member$ $?gen105 ( create$ rule10-defeated rule1 rule6 rule8 ) ) ) ( message-modify-instance ?gen102 ( negative-defeated $?gen104 ) ) )
( defrule rule10-defeated-gen321 ( declare ( salience ( + 1000 ( calc-defeasible-priority 3 [rule10] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen109 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:violenceNature "THREAT" ) ( positive ?gen108 & : ( >= ?gen108 1 ) ) ) ( object ( name ?gen111 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "NONE" ) ( positive ?gen110 & : ( >= ?gen110 1 ) ) ) ( object ( name ?gen102 ) ( is-a threat_offense_factor ) ( defendant ?Defendant ) ( negative-defeated $?gen105 & : ( not ( subseq-pos ( create$ rule10-defeated rule1 rule6 rule8 $$$ $?gen105 ) ) ) ) ) ( test ( eq ( class ?gen102 ) threat_offense_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen102 ) ( is-a threat_offense_factor ) ( negative-defeated $?gen104 & : ( eq $?gen104 ( create$ rule10-defeated rule1 rule6 rule8 $?gen105 ) ) ) ) ) ( test ( instance-existp ?gen102 ) ) => ( bind $?gen104 ( create$ rule10-defeated rule1 rule6 rule8 $?gen105 ) ) ( message-modify-instance ?gen102 ( negative-defeated $?gen104 ) ) )
( defrule rule10-defeasibly-dot-gen323 ( declare ( salience ( + 1000 ( calc-defeasible-priority -1 [rule10] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen102 ) ( is-a threat_offense_factor ) ( defendant ?Defendant ) ( positive 1 ) ( positive-derivator rule10 $? ) ) ( test ( eq ( class ?gen102 ) threat_offense_factor ) ) ( not ( and ( object ( name ?gen109 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:violenceNature "THREAT" ) ( positive ?gen108 & : ( >= ?gen108 1 ) ) ) ( object ( name ?gen111 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "NONE" ) ( positive ?gen110 & : ( >= ?gen110 1 ) ) ) ( object ( name ?gen102 ) ( is-a threat_offense_factor ) ( negative ~ 2 ) ( positive-overruled $?gen104 & : ( not ( member$ rule10 $?gen104 ) ) ) ) ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen102 ) ( is-a threat_offense_factor ) ( positive 0 ) ) ) ( test ( instance-existp ?gen102 ) ) => ( message-modify-instance ?gen102 ( positive 0 ) ) )
( defrule rule10-defeasibly-gen325 ( declare ( salience ( + 1000 ( calc-defeasible-priority 1 [rule10] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen109 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:violenceNature "THREAT" ) ( positive ?gen108 & : ( >= ?gen108 1 ) ) ) ( object ( name ?gen111 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "NONE" ) ( positive ?gen110 & : ( >= ?gen110 1 ) ) ) ( object ( name ?gen102 ) ( is-a threat_offense_factor ) ( defendant ?Defendant ) ( positive 0 ) ( negative ~ 2 ) ( positive-overruled $?gen104 & : ( not ( member$ rule10 $?gen104 ) ) ) ) ( test ( eq ( class ?gen102 ) threat_offense_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen102 ) ( is-a threat_offense_factor ) ( positive 1 ) ( positive-derivator rule10 ?gen109 ?gen111 ) ) ) ( test ( instance-existp ?gen102 ) ) => ( message-modify-instance ?gen102 ( positive 1 ) ( positive-derivator rule10 ?gen109 ?gen111 ) ) )
( defrule rule10-overruled-dot-gen327 ( declare ( salience ( + 1000 ( calc-defeasible-priority -2 [rule10] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen102 ) ( is-a threat_offense_factor ) ( defendant ?Defendant ) ( negative-support $?gen105 ) ( negative-overruled $?gen106 & : ( subseq-pos ( create$ rule10-overruled $?gen105 $$$ $?gen106 ) ) ) ) ( test ( eq ( class ?gen102 ) threat_offense_factor ) ) ( not ( and ( object ( name ?gen109 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:violenceNature "THREAT" ) ( positive ?gen108 & : ( >= ?gen108 1 ) ) ) ( object ( name ?gen111 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "NONE" ) ( positive ?gen110 & : ( >= ?gen110 1 ) ) ) ( object ( name ?gen102 ) ( is-a threat_offense_factor ) ( positive-defeated $?gen104 & : ( not ( member$ rule10 $?gen104 ) ) ) ) ) ) ( test ( and ( neq ?Defendant nil ) ( neq $?gen105 (create$) ) ) ) ( not ( object ( name ?gen102 ) ( is-a threat_offense_factor ) ( negative-overruled $?gen107 & : ( eq $?gen107 ( delete-member$ $?gen106 ( create$ rule10-overruled $?gen105 ) ) ) ) ) ) ( test ( instance-existp ?gen102 ) ) => ( bind $?gen107 ( delete-member$ $?gen106 ( create$ rule10-overruled $?gen105 ) ) ) ( message-modify-instance ?gen102 ( negative-overruled $?gen107 ) ) )
( defrule rule10-overruled-gen329 ( declare ( salience ( + 1000 ( calc-defeasible-priority 2 [rule10] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen109 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:violenceNature "THREAT" ) ( positive ?gen108 & : ( >= ?gen108 1 ) ) ) ( object ( name ?gen111 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "NONE" ) ( positive ?gen110 & : ( >= ?gen110 1 ) ) ) ( object ( name ?gen102 ) ( is-a threat_offense_factor ) ( defendant ?Defendant ) ( negative-support $?gen105 ) ( negative-overruled $?gen106 & : ( not ( subseq-pos ( create$ rule10-overruled $?gen105 $$$ $?gen106 ) ) ) ) ( positive-defeated $?gen104 & : ( not ( member$ rule10 $?gen104 ) ) ) ) ( test ( eq ( class ?gen102 ) threat_offense_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ( neq $?gen105 (create$) ) ) ) ( not ( object ( name ?gen102 ) ( is-a threat_offense_factor ) ( negative-overruled $?gen107 & : ( eq $?gen107 ( create$ rule10-overruled $?gen105 $?gen106 ) ) ) ) ) ( test ( instance-existp ?gen102 ) ) => ( bind $?gen107 ( create$ rule10-overruled $?gen105 $?gen106 ) ) ( message-modify-instance ?gen102 ( negative-overruled $?gen107 ) ) )
( defrule rule10-support-gen331 ( declare ( salience ( + 1000 ( calc-defeasible-priority 5 [rule10] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen100 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:violenceNature "THREAT" ) ) ( object ( name ?gen101 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "NONE" ) ) ( object ( name ?gen102 ) ( is-a threat_offense_factor ) ( defendant ?Defendant ) ( positive-support $?gen104 & : ( not ( subseq-pos ( create$ rule10 ?gen100 ?gen101 $$$ $?gen104 ) ) ) ) ) ( test ( eq ( class ?gen102 ) threat_offense_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen102 ) ( is-a threat_offense_factor ) ( positive-support $?gen107 & : ( eq $?gen107 ( create$ rule10 ?gen100 ?gen101 $?gen104 ) ) ) ) ) ( test ( instance-existp ?gen102 ) ) => ( bind $?gen107 ( create$ rule10 ?gen100 ?gen101 $?gen104 ) ) ( message-modify-instance ?gen102 ( positive-support $?gen107 ) ) )
( defrule rule9-defeated-dot-gen333 ( declare ( salience ( + 1000 ( calc-defeasible-priority -3 [rule9] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen90 ) ( is-a light_offense_factor ) ( defendant ?Defendant ) ( negative-defeated $?gen93 & : ( subseq-pos ( create$ rule9-defeated rule1 rule6 rule8 $$$ $?gen93 ) ) ) ) ( test ( eq ( class ?gen90 ) light_offense_factor ) ) ( not ( and ( object ( name ?gen97 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:violenceNature "RECKLESS_BEHAVIOUR" ) ( positive ?gen96 & : ( >= ?gen96 1 ) ) ) ( object ( name ?gen99 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "NONE" ) ( positive ?gen98 & : ( >= ?gen98 1 ) ) ) ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen90 ) ( is-a light_offense_factor ) ( negative-defeated $?gen92 & : ( eq $?gen92 ( delete-member$ $?gen93 ( create$ rule9-defeated rule1 rule6 rule8 ) ) ) ) ) ) ( test ( instance-existp ?gen90 ) ) => ( bind $?gen92 ( delete-member$ $?gen93 ( create$ rule9-defeated rule1 rule6 rule8 ) ) ) ( message-modify-instance ?gen90 ( negative-defeated $?gen92 ) ) )
( defrule rule9-defeated-gen335 ( declare ( salience ( + 1000 ( calc-defeasible-priority 3 [rule9] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen97 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:violenceNature "RECKLESS_BEHAVIOUR" ) ( positive ?gen96 & : ( >= ?gen96 1 ) ) ) ( object ( name ?gen99 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "NONE" ) ( positive ?gen98 & : ( >= ?gen98 1 ) ) ) ( object ( name ?gen90 ) ( is-a light_offense_factor ) ( defendant ?Defendant ) ( negative-defeated $?gen93 & : ( not ( subseq-pos ( create$ rule9-defeated rule1 rule6 rule8 $$$ $?gen93 ) ) ) ) ) ( test ( eq ( class ?gen90 ) light_offense_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen90 ) ( is-a light_offense_factor ) ( negative-defeated $?gen92 & : ( eq $?gen92 ( create$ rule9-defeated rule1 rule6 rule8 $?gen93 ) ) ) ) ) ( test ( instance-existp ?gen90 ) ) => ( bind $?gen92 ( create$ rule9-defeated rule1 rule6 rule8 $?gen93 ) ) ( message-modify-instance ?gen90 ( negative-defeated $?gen92 ) ) )
( defrule rule9-defeasibly-dot-gen337 ( declare ( salience ( + 1000 ( calc-defeasible-priority -1 [rule9] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen90 ) ( is-a light_offense_factor ) ( defendant ?Defendant ) ( positive 1 ) ( positive-derivator rule9 $? ) ) ( test ( eq ( class ?gen90 ) light_offense_factor ) ) ( not ( and ( object ( name ?gen97 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:violenceNature "RECKLESS_BEHAVIOUR" ) ( positive ?gen96 & : ( >= ?gen96 1 ) ) ) ( object ( name ?gen99 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "NONE" ) ( positive ?gen98 & : ( >= ?gen98 1 ) ) ) ( object ( name ?gen90 ) ( is-a light_offense_factor ) ( negative ~ 2 ) ( positive-overruled $?gen92 & : ( not ( member$ rule9 $?gen92 ) ) ) ) ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen90 ) ( is-a light_offense_factor ) ( positive 0 ) ) ) ( test ( instance-existp ?gen90 ) ) => ( message-modify-instance ?gen90 ( positive 0 ) ) )
( defrule rule9-defeasibly-gen339 ( declare ( salience ( + 1000 ( calc-defeasible-priority 1 [rule9] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen97 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:violenceNature "RECKLESS_BEHAVIOUR" ) ( positive ?gen96 & : ( >= ?gen96 1 ) ) ) ( object ( name ?gen99 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "NONE" ) ( positive ?gen98 & : ( >= ?gen98 1 ) ) ) ( object ( name ?gen90 ) ( is-a light_offense_factor ) ( defendant ?Defendant ) ( positive 0 ) ( negative ~ 2 ) ( positive-overruled $?gen92 & : ( not ( member$ rule9 $?gen92 ) ) ) ) ( test ( eq ( class ?gen90 ) light_offense_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen90 ) ( is-a light_offense_factor ) ( positive 1 ) ( positive-derivator rule9 ?gen97 ?gen99 ) ) ) ( test ( instance-existp ?gen90 ) ) => ( message-modify-instance ?gen90 ( positive 1 ) ( positive-derivator rule9 ?gen97 ?gen99 ) ) )
( defrule rule9-overruled-dot-gen341 ( declare ( salience ( + 1000 ( calc-defeasible-priority -2 [rule9] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen90 ) ( is-a light_offense_factor ) ( defendant ?Defendant ) ( negative-support $?gen93 ) ( negative-overruled $?gen94 & : ( subseq-pos ( create$ rule9-overruled $?gen93 $$$ $?gen94 ) ) ) ) ( test ( eq ( class ?gen90 ) light_offense_factor ) ) ( not ( and ( object ( name ?gen97 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:violenceNature "RECKLESS_BEHAVIOUR" ) ( positive ?gen96 & : ( >= ?gen96 1 ) ) ) ( object ( name ?gen99 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "NONE" ) ( positive ?gen98 & : ( >= ?gen98 1 ) ) ) ( object ( name ?gen90 ) ( is-a light_offense_factor ) ( positive-defeated $?gen92 & : ( not ( member$ rule9 $?gen92 ) ) ) ) ) ) ( test ( and ( neq ?Defendant nil ) ( neq $?gen93 (create$) ) ) ) ( not ( object ( name ?gen90 ) ( is-a light_offense_factor ) ( negative-overruled $?gen95 & : ( eq $?gen95 ( delete-member$ $?gen94 ( create$ rule9-overruled $?gen93 ) ) ) ) ) ) ( test ( instance-existp ?gen90 ) ) => ( bind $?gen95 ( delete-member$ $?gen94 ( create$ rule9-overruled $?gen93 ) ) ) ( message-modify-instance ?gen90 ( negative-overruled $?gen95 ) ) )
( defrule rule9-overruled-gen343 ( declare ( salience ( + 1000 ( calc-defeasible-priority 2 [rule9] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen97 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:violenceNature "RECKLESS_BEHAVIOUR" ) ( positive ?gen96 & : ( >= ?gen96 1 ) ) ) ( object ( name ?gen99 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "NONE" ) ( positive ?gen98 & : ( >= ?gen98 1 ) ) ) ( object ( name ?gen90 ) ( is-a light_offense_factor ) ( defendant ?Defendant ) ( negative-support $?gen93 ) ( negative-overruled $?gen94 & : ( not ( subseq-pos ( create$ rule9-overruled $?gen93 $$$ $?gen94 ) ) ) ) ( positive-defeated $?gen92 & : ( not ( member$ rule9 $?gen92 ) ) ) ) ( test ( eq ( class ?gen90 ) light_offense_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ( neq $?gen93 (create$) ) ) ) ( not ( object ( name ?gen90 ) ( is-a light_offense_factor ) ( negative-overruled $?gen95 & : ( eq $?gen95 ( create$ rule9-overruled $?gen93 $?gen94 ) ) ) ) ) ( test ( instance-existp ?gen90 ) ) => ( bind $?gen95 ( create$ rule9-overruled $?gen93 $?gen94 ) ) ( message-modify-instance ?gen90 ( negative-overruled $?gen95 ) ) )
( defrule rule9-support-gen345 ( declare ( salience ( + 1000 ( calc-defeasible-priority 5 [rule9] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen88 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:violenceNature "RECKLESS_BEHAVIOUR" ) ) ( object ( name ?gen89 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "NONE" ) ) ( object ( name ?gen90 ) ( is-a light_offense_factor ) ( defendant ?Defendant ) ( positive-support $?gen92 & : ( not ( subseq-pos ( create$ rule9 ?gen88 ?gen89 $$$ $?gen92 ) ) ) ) ) ( test ( eq ( class ?gen90 ) light_offense_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen90 ) ( is-a light_offense_factor ) ( positive-support $?gen95 & : ( eq $?gen95 ( create$ rule9 ?gen88 ?gen89 $?gen92 ) ) ) ) ) ( test ( instance-existp ?gen90 ) ) => ( bind $?gen95 ( create$ rule9 ?gen88 ?gen89 $?gen92 ) ) ( message-modify-instance ?gen90 ( positive-support $?gen95 ) ) )
( defrule rule8-defeasibly-dot-gen347 ( declare ( salience ( + 1000 ( calc-defeasible-priority -1 [rule8] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen80 ) ( is-a multiple_victims_factor ) ( defendant ?Defendant ) ( positive 1 ) ( positive-derivator rule8 $? ) ) ( test ( eq ( class ?gen80 ) multiple_victims_factor ) ) ( not ( and ( object ( name ?gen87 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:numvictims ?NumVictims ) ( positive ?gen86 & : ( >= ?gen86 1 ) ) ) ( object ( name ?gen80 ) ( is-a multiple_victims_factor ) ( negative ~ 2 ) ( positive-overruled $?gen82 & : ( not ( member$ rule8 $?gen82 ) ) ) ) ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen80 ) ( is-a multiple_victims_factor ) ( positive 0 ) ) ) ( test ( instance-existp ?gen80 ) ) => ( message-modify-instance ?gen80 ( positive 0 ) ) )
( defrule rule8-defeasibly-gen349 ( declare ( salience ( + 1000 ( calc-defeasible-priority 1 [rule8] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen87 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:numvictims ?NumVictims ) ( positive ?gen86 & : ( >= ?gen86 1 ) ) ) ( object ( name ?gen80 ) ( is-a multiple_victims_factor ) ( defendant ?Defendant ) ( positive 0 ) ( negative ~ 2 ) ( positive-overruled $?gen82 & : ( not ( member$ rule8 $?gen82 ) ) ) ) ( test ( eq ( class ?gen80 ) multiple_victims_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?NumVictims (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen80 ) ( is-a multiple_victims_factor ) ( positive 1 ) ( positive-derivator rule8 ?gen87 ) ) ) ( test ( instance-existp ?gen80 ) ) => ( message-modify-instance ?gen80 ( positive 1 ) ( positive-derivator rule8 ?gen87 ) ) )
( defrule rule8-overruled-dot-gen351 ( declare ( salience ( + 1000 ( calc-defeasible-priority -2 [rule8] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen80 ) ( is-a multiple_victims_factor ) ( defendant ?Defendant ) ( negative-support $?gen83 ) ( negative-overruled $?gen84 & : ( subseq-pos ( create$ rule8-overruled $?gen83 $$$ $?gen84 ) ) ) ) ( test ( eq ( class ?gen80 ) multiple_victims_factor ) ) ( not ( and ( object ( name ?gen87 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:numvictims ?NumVictims ) ( positive ?gen86 & : ( >= ?gen86 1 ) ) ) ( object ( name ?gen80 ) ( is-a multiple_victims_factor ) ( positive-defeated $?gen82 & : ( not ( member$ rule8 $?gen82 ) ) ) ) ) ) ( test ( and ( neq ?Defendant nil ) ( neq $?gen83 (create$) ) ) ) ( not ( object ( name ?gen80 ) ( is-a multiple_victims_factor ) ( negative-overruled $?gen85 & : ( eq $?gen85 ( delete-member$ $?gen84 ( create$ rule8-overruled $?gen83 ) ) ) ) ) ) ( test ( instance-existp ?gen80 ) ) => ( bind $?gen85 ( delete-member$ $?gen84 ( create$ rule8-overruled $?gen83 ) ) ) ( message-modify-instance ?gen80 ( negative-overruled $?gen85 ) ) )
( defrule rule8-overruled-gen353 ( declare ( salience ( + 1000 ( calc-defeasible-priority 2 [rule8] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen87 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:numvictims ?NumVictims ) ( positive ?gen86 & : ( >= ?gen86 1 ) ) ) ( object ( name ?gen80 ) ( is-a multiple_victims_factor ) ( defendant ?Defendant ) ( negative-support $?gen83 ) ( negative-overruled $?gen84 & : ( not ( subseq-pos ( create$ rule8-overruled $?gen83 $$$ $?gen84 ) ) ) ) ( positive-defeated $?gen82 & : ( not ( member$ rule8 $?gen82 ) ) ) ) ( test ( eq ( class ?gen80 ) multiple_victims_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?NumVictims (create$) ) ( neq ?Defendant nil ) ( neq $?gen83 (create$) ) ) ) ( not ( object ( name ?gen80 ) ( is-a multiple_victims_factor ) ( negative-overruled $?gen85 & : ( eq $?gen85 ( create$ rule8-overruled $?gen83 $?gen84 ) ) ) ) ) ( test ( instance-existp ?gen80 ) ) => ( bind $?gen85 ( create$ rule8-overruled $?gen83 $?gen84 ) ) ( message-modify-instance ?gen80 ( negative-overruled $?gen85 ) ) )
( defrule rule8-support-gen355 ( declare ( salience ( + 1000 ( calc-defeasible-priority 5 [rule8] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen79 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:numvictims ?NumVictims ) ) ( object ( name ?gen80 ) ( is-a multiple_victims_factor ) ( defendant ?Defendant ) ( positive-support $?gen82 & : ( not ( subseq-pos ( create$ rule8 ?gen79 $$$ $?gen82 ) ) ) ) ) ( test ( eq ( class ?gen80 ) multiple_victims_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?NumVictims (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen80 ) ( is-a multiple_victims_factor ) ( positive-support $?gen85 & : ( eq $?gen85 ( create$ rule8 ?gen79 $?gen82 ) ) ) ) ) ( test ( instance-existp ?gen80 ) ) => ( bind $?gen85 ( create$ rule8 ?gen79 $?gen82 ) ) ( message-modify-instance ?gen80 ( positive-support $?gen85 ) ) )
( defrule rule7-defeasibly-dot-gen357 ( declare ( salience ( + 1000 ( calc-defeasible-priority -1 [rule7] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen71 ) ( is-a recidivist_factor ) ( defendant ?Defendant ) ( positive 1 ) ( positive-derivator rule7 $? ) ) ( test ( eq ( class ?gen71 ) recidivist_factor ) ) ( not ( and ( object ( name ?gen78 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:previouslyConvicted true ) ( positive ?gen77 & : ( >= ?gen77 1 ) ) ) ( object ( name ?gen71 ) ( is-a recidivist_factor ) ( negative ~ 2 ) ( positive-overruled $?gen73 & : ( not ( member$ rule7 $?gen73 ) ) ) ) ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen71 ) ( is-a recidivist_factor ) ( positive 0 ) ) ) ( test ( instance-existp ?gen71 ) ) => ( message-modify-instance ?gen71 ( positive 0 ) ) )
( defrule rule7-defeasibly-gen359 ( declare ( salience ( + 1000 ( calc-defeasible-priority 1 [rule7] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen78 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:previouslyConvicted true ) ( positive ?gen77 & : ( >= ?gen77 1 ) ) ) ( object ( name ?gen71 ) ( is-a recidivist_factor ) ( defendant ?Defendant ) ( positive 0 ) ( negative ~ 2 ) ( positive-overruled $?gen73 & : ( not ( member$ rule7 $?gen73 ) ) ) ) ( test ( eq ( class ?gen71 ) recidivist_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen71 ) ( is-a recidivist_factor ) ( positive 1 ) ( positive-derivator rule7 ?gen78 ) ) ) ( test ( instance-existp ?gen71 ) ) => ( message-modify-instance ?gen71 ( positive 1 ) ( positive-derivator rule7 ?gen78 ) ) )
( defrule rule7-overruled-dot-gen361 ( declare ( salience ( + 1000 ( calc-defeasible-priority -2 [rule7] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen71 ) ( is-a recidivist_factor ) ( defendant ?Defendant ) ( negative-support $?gen74 ) ( negative-overruled $?gen75 & : ( subseq-pos ( create$ rule7-overruled $?gen74 $$$ $?gen75 ) ) ) ) ( test ( eq ( class ?gen71 ) recidivist_factor ) ) ( not ( and ( object ( name ?gen78 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:previouslyConvicted true ) ( positive ?gen77 & : ( >= ?gen77 1 ) ) ) ( object ( name ?gen71 ) ( is-a recidivist_factor ) ( positive-defeated $?gen73 & : ( not ( member$ rule7 $?gen73 ) ) ) ) ) ) ( test ( and ( neq ?Defendant nil ) ( neq $?gen74 (create$) ) ) ) ( not ( object ( name ?gen71 ) ( is-a recidivist_factor ) ( negative-overruled $?gen76 & : ( eq $?gen76 ( delete-member$ $?gen75 ( create$ rule7-overruled $?gen74 ) ) ) ) ) ) ( test ( instance-existp ?gen71 ) ) => ( bind $?gen76 ( delete-member$ $?gen75 ( create$ rule7-overruled $?gen74 ) ) ) ( message-modify-instance ?gen71 ( negative-overruled $?gen76 ) ) )
( defrule rule7-overruled-gen363 ( declare ( salience ( + 1000 ( calc-defeasible-priority 2 [rule7] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen78 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:previouslyConvicted true ) ( positive ?gen77 & : ( >= ?gen77 1 ) ) ) ( object ( name ?gen71 ) ( is-a recidivist_factor ) ( defendant ?Defendant ) ( negative-support $?gen74 ) ( negative-overruled $?gen75 & : ( not ( subseq-pos ( create$ rule7-overruled $?gen74 $$$ $?gen75 ) ) ) ) ( positive-defeated $?gen73 & : ( not ( member$ rule7 $?gen73 ) ) ) ) ( test ( eq ( class ?gen71 ) recidivist_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ( neq $?gen74 (create$) ) ) ) ( not ( object ( name ?gen71 ) ( is-a recidivist_factor ) ( negative-overruled $?gen76 & : ( eq $?gen76 ( create$ rule7-overruled $?gen74 $?gen75 ) ) ) ) ) ( test ( instance-existp ?gen71 ) ) => ( bind $?gen76 ( create$ rule7-overruled $?gen74 $?gen75 ) ) ( message-modify-instance ?gen71 ( negative-overruled $?gen76 ) ) )
( defrule rule7-support-gen365 ( declare ( salience ( + 1000 ( calc-defeasible-priority 5 [rule7] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen70 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:previouslyConvicted true ) ) ( object ( name ?gen71 ) ( is-a recidivist_factor ) ( defendant ?Defendant ) ( positive-support $?gen73 & : ( not ( subseq-pos ( create$ rule7 ?gen70 $$$ $?gen73 ) ) ) ) ) ( test ( eq ( class ?gen71 ) recidivist_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen71 ) ( is-a recidivist_factor ) ( positive-support $?gen76 & : ( eq $?gen76 ( create$ rule7 ?gen70 $?gen73 ) ) ) ) ) ( test ( instance-existp ?gen71 ) ) => ( bind $?gen76 ( create$ rule7 ?gen70 $?gen73 ) ) ( message-modify-instance ?gen71 ( positive-support $?gen76 ) ) )
( defrule rule6-defeasibly-dot-gen367 ( declare ( salience ( + 1000 ( calc-defeasible-priority -1 [rule6] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen62 ) ( is-a child_victim_factor ) ( defendant ?Defendant ) ( positive 1 ) ( positive-derivator rule6 $? ) ) ( test ( eq ( class ?gen62 ) child_victim_factor ) ) ( not ( and ( object ( name ?gen69 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:victimRelationship "CHILD" ) ( positive ?gen68 & : ( >= ?gen68 1 ) ) ) ( object ( name ?gen62 ) ( is-a child_victim_factor ) ( negative ~ 2 ) ( positive-overruled $?gen64 & : ( not ( member$ rule6 $?gen64 ) ) ) ) ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen62 ) ( is-a child_victim_factor ) ( positive 0 ) ) ) ( test ( instance-existp ?gen62 ) ) => ( message-modify-instance ?gen62 ( positive 0 ) ) )
( defrule rule6-defeasibly-gen369 ( declare ( salience ( + 1000 ( calc-defeasible-priority 1 [rule6] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen69 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:victimRelationship "CHILD" ) ( positive ?gen68 & : ( >= ?gen68 1 ) ) ) ( object ( name ?gen62 ) ( is-a child_victim_factor ) ( defendant ?Defendant ) ( positive 0 ) ( negative ~ 2 ) ( positive-overruled $?gen64 & : ( not ( member$ rule6 $?gen64 ) ) ) ) ( test ( eq ( class ?gen62 ) child_victim_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen62 ) ( is-a child_victim_factor ) ( positive 1 ) ( positive-derivator rule6 ?gen69 ) ) ) ( test ( instance-existp ?gen62 ) ) => ( message-modify-instance ?gen62 ( positive 1 ) ( positive-derivator rule6 ?gen69 ) ) )
( defrule rule6-overruled-dot-gen371 ( declare ( salience ( + 1000 ( calc-defeasible-priority -2 [rule6] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen62 ) ( is-a child_victim_factor ) ( defendant ?Defendant ) ( negative-support $?gen65 ) ( negative-overruled $?gen66 & : ( subseq-pos ( create$ rule6-overruled $?gen65 $$$ $?gen66 ) ) ) ) ( test ( eq ( class ?gen62 ) child_victim_factor ) ) ( not ( and ( object ( name ?gen69 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:victimRelationship "CHILD" ) ( positive ?gen68 & : ( >= ?gen68 1 ) ) ) ( object ( name ?gen62 ) ( is-a child_victim_factor ) ( positive-defeated $?gen64 & : ( not ( member$ rule6 $?gen64 ) ) ) ) ) ) ( test ( and ( neq ?Defendant nil ) ( neq $?gen65 (create$) ) ) ) ( not ( object ( name ?gen62 ) ( is-a child_victim_factor ) ( negative-overruled $?gen67 & : ( eq $?gen67 ( delete-member$ $?gen66 ( create$ rule6-overruled $?gen65 ) ) ) ) ) ) ( test ( instance-existp ?gen62 ) ) => ( bind $?gen67 ( delete-member$ $?gen66 ( create$ rule6-overruled $?gen65 ) ) ) ( message-modify-instance ?gen62 ( negative-overruled $?gen67 ) ) )
( defrule rule6-overruled-gen373 ( declare ( salience ( + 1000 ( calc-defeasible-priority 2 [rule6] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen69 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:victimRelationship "CHILD" ) ( positive ?gen68 & : ( >= ?gen68 1 ) ) ) ( object ( name ?gen62 ) ( is-a child_victim_factor ) ( defendant ?Defendant ) ( negative-support $?gen65 ) ( negative-overruled $?gen66 & : ( not ( subseq-pos ( create$ rule6-overruled $?gen65 $$$ $?gen66 ) ) ) ) ( positive-defeated $?gen64 & : ( not ( member$ rule6 $?gen64 ) ) ) ) ( test ( eq ( class ?gen62 ) child_victim_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ( neq $?gen65 (create$) ) ) ) ( not ( object ( name ?gen62 ) ( is-a child_victim_factor ) ( negative-overruled $?gen67 & : ( eq $?gen67 ( create$ rule6-overruled $?gen65 $?gen66 ) ) ) ) ) ( test ( instance-existp ?gen62 ) ) => ( bind $?gen67 ( create$ rule6-overruled $?gen65 $?gen66 ) ) ( message-modify-instance ?gen62 ( negative-overruled $?gen67 ) ) )
( defrule rule6-support-gen375 ( declare ( salience ( + 1000 ( calc-defeasible-priority 5 [rule6] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen61 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:victimRelationship "CHILD" ) ) ( object ( name ?gen62 ) ( is-a child_victim_factor ) ( defendant ?Defendant ) ( positive-support $?gen64 & : ( not ( subseq-pos ( create$ rule6 ?gen61 $$$ $?gen64 ) ) ) ) ) ( test ( eq ( class ?gen62 ) child_victim_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen62 ) ( is-a child_victim_factor ) ( positive-support $?gen67 & : ( eq $?gen67 ( create$ rule6 ?gen61 $?gen64 ) ) ) ) ) ( test ( instance-existp ?gen62 ) ) => ( bind $?gen67 ( create$ rule6 ?gen61 $?gen64 ) ) ( message-modify-instance ?gen62 ( positive-support $?gen67 ) ) )
( defrule rule5-defeasibly-dot-gen377 ( declare ( salience ( + 1000 ( calc-defeasible-priority -1 [rule5] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen53 ) ( is-a family_offense_factor ) ( defendant ?Defendant ) ( positive 1 ) ( positive-derivator rule5 $? ) ) ( test ( eq ( class ?gen53 ) family_offense_factor ) ) ( not ( and ( object ( name ?gen60 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:victimRelationship "SPOUSE" ) ( positive ?gen59 & : ( >= ?gen59 1 ) ) ) ( object ( name ?gen53 ) ( is-a family_offense_factor ) ( negative ~ 2 ) ( positive-overruled $?gen55 & : ( not ( member$ rule5 $?gen55 ) ) ) ) ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen53 ) ( is-a family_offense_factor ) ( positive 0 ) ) ) ( test ( instance-existp ?gen53 ) ) => ( message-modify-instance ?gen53 ( positive 0 ) ) )
( defrule rule5-defeasibly-gen379 ( declare ( salience ( + 1000 ( calc-defeasible-priority 1 [rule5] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen60 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:victimRelationship "SPOUSE" ) ( positive ?gen59 & : ( >= ?gen59 1 ) ) ) ( object ( name ?gen53 ) ( is-a family_offense_factor ) ( defendant ?Defendant ) ( positive 0 ) ( negative ~ 2 ) ( positive-overruled $?gen55 & : ( not ( member$ rule5 $?gen55 ) ) ) ) ( test ( eq ( class ?gen53 ) family_offense_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen53 ) ( is-a family_offense_factor ) ( positive 1 ) ( positive-derivator rule5 ?gen60 ) ) ) ( test ( instance-existp ?gen53 ) ) => ( message-modify-instance ?gen53 ( positive 1 ) ( positive-derivator rule5 ?gen60 ) ) )
( defrule rule5-overruled-dot-gen381 ( declare ( salience ( + 1000 ( calc-defeasible-priority -2 [rule5] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen53 ) ( is-a family_offense_factor ) ( defendant ?Defendant ) ( negative-support $?gen56 ) ( negative-overruled $?gen57 & : ( subseq-pos ( create$ rule5-overruled $?gen56 $$$ $?gen57 ) ) ) ) ( test ( eq ( class ?gen53 ) family_offense_factor ) ) ( not ( and ( object ( name ?gen60 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:victimRelationship "SPOUSE" ) ( positive ?gen59 & : ( >= ?gen59 1 ) ) ) ( object ( name ?gen53 ) ( is-a family_offense_factor ) ( positive-defeated $?gen55 & : ( not ( member$ rule5 $?gen55 ) ) ) ) ) ) ( test ( and ( neq ?Defendant nil ) ( neq $?gen56 (create$) ) ) ) ( not ( object ( name ?gen53 ) ( is-a family_offense_factor ) ( negative-overruled $?gen58 & : ( eq $?gen58 ( delete-member$ $?gen57 ( create$ rule5-overruled $?gen56 ) ) ) ) ) ) ( test ( instance-existp ?gen53 ) ) => ( bind $?gen58 ( delete-member$ $?gen57 ( create$ rule5-overruled $?gen56 ) ) ) ( message-modify-instance ?gen53 ( negative-overruled $?gen58 ) ) )
( defrule rule5-overruled-gen383 ( declare ( salience ( + 1000 ( calc-defeasible-priority 2 [rule5] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen60 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:victimRelationship "SPOUSE" ) ( positive ?gen59 & : ( >= ?gen59 1 ) ) ) ( object ( name ?gen53 ) ( is-a family_offense_factor ) ( defendant ?Defendant ) ( negative-support $?gen56 ) ( negative-overruled $?gen57 & : ( not ( subseq-pos ( create$ rule5-overruled $?gen56 $$$ $?gen57 ) ) ) ) ( positive-defeated $?gen55 & : ( not ( member$ rule5 $?gen55 ) ) ) ) ( test ( eq ( class ?gen53 ) family_offense_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ( neq $?gen56 (create$) ) ) ) ( not ( object ( name ?gen53 ) ( is-a family_offense_factor ) ( negative-overruled $?gen58 & : ( eq $?gen58 ( create$ rule5-overruled $?gen56 $?gen57 ) ) ) ) ) ( test ( instance-existp ?gen53 ) ) => ( bind $?gen58 ( create$ rule5-overruled $?gen56 $?gen57 ) ) ( message-modify-instance ?gen53 ( negative-overruled $?gen58 ) ) )
( defrule rule5-support-gen385 ( declare ( salience ( + 1000 ( calc-defeasible-priority 5 [rule5] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen52 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:victimRelationship "SPOUSE" ) ) ( object ( name ?gen53 ) ( is-a family_offense_factor ) ( defendant ?Defendant ) ( positive-support $?gen55 & : ( not ( subseq-pos ( create$ rule5 ?gen52 $$$ $?gen55 ) ) ) ) ) ( test ( eq ( class ?gen53 ) family_offense_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen53 ) ( is-a family_offense_factor ) ( positive-support $?gen58 & : ( eq $?gen58 ( create$ rule5 ?gen52 $?gen55 ) ) ) ) ) ( test ( instance-existp ?gen53 ) ) => ( bind $?gen58 ( create$ rule5 ?gen52 $?gen55 ) ) ( message-modify-instance ?gen53 ( positive-support $?gen58 ) ) )
( defrule rule4-defeasibly-dot-gen387 ( declare ( salience ( + 1000 ( calc-defeasible-priority -1 [rule4] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen44 ) ( is-a weapon_factor ) ( defendant ?Defendant ) ( positive 1 ) ( positive-derivator rule4 $? ) ) ( test ( eq ( class ?gen44 ) weapon_factor ) ) ( not ( and ( object ( name ?gen51 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:useOfWeapon true ) ( positive ?gen50 & : ( >= ?gen50 1 ) ) ) ( object ( name ?gen44 ) ( is-a weapon_factor ) ( negative ~ 2 ) ( positive-overruled $?gen46 & : ( not ( member$ rule4 $?gen46 ) ) ) ) ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen44 ) ( is-a weapon_factor ) ( positive 0 ) ) ) ( test ( instance-existp ?gen44 ) ) => ( message-modify-instance ?gen44 ( positive 0 ) ) )
( defrule rule4-defeasibly-gen389 ( declare ( salience ( + 1000 ( calc-defeasible-priority 1 [rule4] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen51 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:useOfWeapon true ) ( positive ?gen50 & : ( >= ?gen50 1 ) ) ) ( object ( name ?gen44 ) ( is-a weapon_factor ) ( defendant ?Defendant ) ( positive 0 ) ( negative ~ 2 ) ( positive-overruled $?gen46 & : ( not ( member$ rule4 $?gen46 ) ) ) ) ( test ( eq ( class ?gen44 ) weapon_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen44 ) ( is-a weapon_factor ) ( positive 1 ) ( positive-derivator rule4 ?gen51 ) ) ) ( test ( instance-existp ?gen44 ) ) => ( message-modify-instance ?gen44 ( positive 1 ) ( positive-derivator rule4 ?gen51 ) ) )
( defrule rule4-overruled-dot-gen391 ( declare ( salience ( + 1000 ( calc-defeasible-priority -2 [rule4] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen44 ) ( is-a weapon_factor ) ( defendant ?Defendant ) ( negative-support $?gen47 ) ( negative-overruled $?gen48 & : ( subseq-pos ( create$ rule4-overruled $?gen47 $$$ $?gen48 ) ) ) ) ( test ( eq ( class ?gen44 ) weapon_factor ) ) ( not ( and ( object ( name ?gen51 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:useOfWeapon true ) ( positive ?gen50 & : ( >= ?gen50 1 ) ) ) ( object ( name ?gen44 ) ( is-a weapon_factor ) ( positive-defeated $?gen46 & : ( not ( member$ rule4 $?gen46 ) ) ) ) ) ) ( test ( and ( neq ?Defendant nil ) ( neq $?gen47 (create$) ) ) ) ( not ( object ( name ?gen44 ) ( is-a weapon_factor ) ( negative-overruled $?gen49 & : ( eq $?gen49 ( delete-member$ $?gen48 ( create$ rule4-overruled $?gen47 ) ) ) ) ) ) ( test ( instance-existp ?gen44 ) ) => ( bind $?gen49 ( delete-member$ $?gen48 ( create$ rule4-overruled $?gen47 ) ) ) ( message-modify-instance ?gen44 ( negative-overruled $?gen49 ) ) )
( defrule rule4-overruled-gen393 ( declare ( salience ( + 1000 ( calc-defeasible-priority 2 [rule4] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen51 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:useOfWeapon true ) ( positive ?gen50 & : ( >= ?gen50 1 ) ) ) ( object ( name ?gen44 ) ( is-a weapon_factor ) ( defendant ?Defendant ) ( negative-support $?gen47 ) ( negative-overruled $?gen48 & : ( not ( subseq-pos ( create$ rule4-overruled $?gen47 $$$ $?gen48 ) ) ) ) ( positive-defeated $?gen46 & : ( not ( member$ rule4 $?gen46 ) ) ) ) ( test ( eq ( class ?gen44 ) weapon_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ( neq $?gen47 (create$) ) ) ) ( not ( object ( name ?gen44 ) ( is-a weapon_factor ) ( negative-overruled $?gen49 & : ( eq $?gen49 ( create$ rule4-overruled $?gen47 $?gen48 ) ) ) ) ) ( test ( instance-existp ?gen44 ) ) => ( bind $?gen49 ( create$ rule4-overruled $?gen47 $?gen48 ) ) ( message-modify-instance ?gen44 ( negative-overruled $?gen49 ) ) )
( defrule rule4-support-gen395 ( declare ( salience ( + 1000 ( calc-defeasible-priority 5 [rule4] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen43 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:useOfWeapon true ) ) ( object ( name ?gen44 ) ( is-a weapon_factor ) ( defendant ?Defendant ) ( positive-support $?gen46 & : ( not ( subseq-pos ( create$ rule4 ?gen43 $$$ $?gen46 ) ) ) ) ) ( test ( eq ( class ?gen44 ) weapon_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen44 ) ( is-a weapon_factor ) ( positive-support $?gen49 & : ( eq $?gen49 ( create$ rule4 ?gen43 $?gen46 ) ) ) ) ) ( test ( instance-existp ?gen44 ) ) => ( bind $?gen49 ( create$ rule4 ?gen43 $?gen46 ) ) ( message-modify-instance ?gen44 ( positive-support $?gen49 ) ) )
( defrule rule3-defeasibly-dot-gen397 ( declare ( salience ( + 1000 ( calc-defeasible-priority -1 [rule3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen35 ) ( is-a aggravating_factor ) ( defendant ?Defendant ) ( positive 1 ) ( positive-derivator rule3 $? ) ) ( test ( eq ( class ?gen35 ) aggravating_factor ) ) ( not ( and ( object ( name ?gen42 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:childrenPresent true ) ( positive ?gen41 & : ( >= ?gen41 1 ) ) ) ( object ( name ?gen35 ) ( is-a aggravating_factor ) ( negative ~ 2 ) ( positive-overruled $?gen37 & : ( not ( member$ rule3 $?gen37 ) ) ) ) ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen35 ) ( is-a aggravating_factor ) ( positive 0 ) ) ) ( test ( instance-existp ?gen35 ) ) => ( message-modify-instance ?gen35 ( positive 0 ) ) )
( defrule rule3-defeasibly-gen399 ( declare ( salience ( + 1000 ( calc-defeasible-priority 1 [rule3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen42 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:childrenPresent true ) ( positive ?gen41 & : ( >= ?gen41 1 ) ) ) ( object ( name ?gen35 ) ( is-a aggravating_factor ) ( defendant ?Defendant ) ( positive 0 ) ( negative ~ 2 ) ( positive-overruled $?gen37 & : ( not ( member$ rule3 $?gen37 ) ) ) ) ( test ( eq ( class ?gen35 ) aggravating_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen35 ) ( is-a aggravating_factor ) ( positive 1 ) ( positive-derivator rule3 ?gen42 ) ) ) ( test ( instance-existp ?gen35 ) ) => ( message-modify-instance ?gen35 ( positive 1 ) ( positive-derivator rule3 ?gen42 ) ) )
( defrule rule3-overruled-dot-gen401 ( declare ( salience ( + 1000 ( calc-defeasible-priority -2 [rule3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen35 ) ( is-a aggravating_factor ) ( defendant ?Defendant ) ( negative-support $?gen38 ) ( negative-overruled $?gen39 & : ( subseq-pos ( create$ rule3-overruled $?gen38 $$$ $?gen39 ) ) ) ) ( test ( eq ( class ?gen35 ) aggravating_factor ) ) ( not ( and ( object ( name ?gen42 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:childrenPresent true ) ( positive ?gen41 & : ( >= ?gen41 1 ) ) ) ( object ( name ?gen35 ) ( is-a aggravating_factor ) ( positive-defeated $?gen37 & : ( not ( member$ rule3 $?gen37 ) ) ) ) ) ) ( test ( and ( neq ?Defendant nil ) ( neq $?gen38 (create$) ) ) ) ( not ( object ( name ?gen35 ) ( is-a aggravating_factor ) ( negative-overruled $?gen40 & : ( eq $?gen40 ( delete-member$ $?gen39 ( create$ rule3-overruled $?gen38 ) ) ) ) ) ) ( test ( instance-existp ?gen35 ) ) => ( bind $?gen40 ( delete-member$ $?gen39 ( create$ rule3-overruled $?gen38 ) ) ) ( message-modify-instance ?gen35 ( negative-overruled $?gen40 ) ) )
( defrule rule3-overruled-gen403 ( declare ( salience ( + 1000 ( calc-defeasible-priority 2 [rule3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen42 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:childrenPresent true ) ( positive ?gen41 & : ( >= ?gen41 1 ) ) ) ( object ( name ?gen35 ) ( is-a aggravating_factor ) ( defendant ?Defendant ) ( negative-support $?gen38 ) ( negative-overruled $?gen39 & : ( not ( subseq-pos ( create$ rule3-overruled $?gen38 $$$ $?gen39 ) ) ) ) ( positive-defeated $?gen37 & : ( not ( member$ rule3 $?gen37 ) ) ) ) ( test ( eq ( class ?gen35 ) aggravating_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ( neq $?gen38 (create$) ) ) ) ( not ( object ( name ?gen35 ) ( is-a aggravating_factor ) ( negative-overruled $?gen40 & : ( eq $?gen40 ( create$ rule3-overruled $?gen38 $?gen39 ) ) ) ) ) ( test ( instance-existp ?gen35 ) ) => ( bind $?gen40 ( create$ rule3-overruled $?gen38 $?gen39 ) ) ( message-modify-instance ?gen35 ( negative-overruled $?gen40 ) ) )
( defrule rule3-support-gen405 ( declare ( salience ( + 1000 ( calc-defeasible-priority 5 [rule3] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen34 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:childrenPresent true ) ) ( object ( name ?gen35 ) ( is-a aggravating_factor ) ( defendant ?Defendant ) ( positive-support $?gen37 & : ( not ( subseq-pos ( create$ rule3 ?gen34 $$$ $?gen37 ) ) ) ) ) ( test ( eq ( class ?gen35 ) aggravating_factor ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen35 ) ( is-a aggravating_factor ) ( positive-support $?gen40 & : ( eq $?gen40 ( create$ rule3 ?gen34 $?gen37 ) ) ) ) ) ( test ( instance-existp ?gen35 ) ) => ( bind $?gen40 ( create$ rule3 ?gen34 $?gen37 ) ) ( message-modify-instance ?gen35 ( positive-support $?gen40 ) ) )
( defrule rule2-defeasibly-dot-gen407 ( declare ( salience ( + 1000 ( calc-defeasible-priority -1 [rule2] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen26 ) ( is-a increase_punishment ) ( defendant ?Defendant ) ( positive 1 ) ( positive-derivator rule2 $? ) ) ( test ( eq ( class ?gen26 ) increase_punishment ) ) ( not ( and ( object ( name ?gen33 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:protectionMeasureViolation true ) ( positive ?gen32 & : ( >= ?gen32 1 ) ) ) ( object ( name ?gen26 ) ( is-a increase_punishment ) ( negative ~ 2 ) ( positive-overruled $?gen28 & : ( not ( member$ rule2 $?gen28 ) ) ) ) ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen26 ) ( is-a increase_punishment ) ( positive 0 ) ) ) ( test ( instance-existp ?gen26 ) ) => ( message-modify-instance ?gen26 ( positive 0 ) ) )
( defrule rule2-defeasibly-gen409 ( declare ( salience ( + 1000 ( calc-defeasible-priority 1 [rule2] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen33 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:protectionMeasureViolation true ) ( positive ?gen32 & : ( >= ?gen32 1 ) ) ) ( object ( name ?gen26 ) ( is-a increase_punishment ) ( defendant ?Defendant ) ( positive 0 ) ( negative ~ 2 ) ( positive-overruled $?gen28 & : ( not ( member$ rule2 $?gen28 ) ) ) ) ( test ( eq ( class ?gen26 ) increase_punishment ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen26 ) ( is-a increase_punishment ) ( positive 1 ) ( positive-derivator rule2 ?gen33 ) ) ) ( test ( instance-existp ?gen26 ) ) => ( message-modify-instance ?gen26 ( positive 1 ) ( positive-derivator rule2 ?gen33 ) ) )
( defrule rule2-overruled-dot-gen411 ( declare ( salience ( + 1000 ( calc-defeasible-priority -2 [rule2] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen26 ) ( is-a increase_punishment ) ( defendant ?Defendant ) ( negative-support $?gen29 ) ( negative-overruled $?gen30 & : ( subseq-pos ( create$ rule2-overruled $?gen29 $$$ $?gen30 ) ) ) ) ( test ( eq ( class ?gen26 ) increase_punishment ) ) ( not ( and ( object ( name ?gen33 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:protectionMeasureViolation true ) ( positive ?gen32 & : ( >= ?gen32 1 ) ) ) ( object ( name ?gen26 ) ( is-a increase_punishment ) ( positive-defeated $?gen28 & : ( not ( member$ rule2 $?gen28 ) ) ) ) ) ) ( test ( and ( neq ?Defendant nil ) ( neq $?gen29 (create$) ) ) ) ( not ( object ( name ?gen26 ) ( is-a increase_punishment ) ( negative-overruled $?gen31 & : ( eq $?gen31 ( delete-member$ $?gen30 ( create$ rule2-overruled $?gen29 ) ) ) ) ) ) ( test ( instance-existp ?gen26 ) ) => ( bind $?gen31 ( delete-member$ $?gen30 ( create$ rule2-overruled $?gen29 ) ) ) ( message-modify-instance ?gen26 ( negative-overruled $?gen31 ) ) )
( defrule rule2-overruled-gen413 ( declare ( salience ( + 1000 ( calc-defeasible-priority 2 [rule2] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen33 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:protectionMeasureViolation true ) ( positive ?gen32 & : ( >= ?gen32 1 ) ) ) ( object ( name ?gen26 ) ( is-a increase_punishment ) ( defendant ?Defendant ) ( negative-support $?gen29 ) ( negative-overruled $?gen30 & : ( not ( subseq-pos ( create$ rule2-overruled $?gen29 $$$ $?gen30 ) ) ) ) ( positive-defeated $?gen28 & : ( not ( member$ rule2 $?gen28 ) ) ) ) ( test ( eq ( class ?gen26 ) increase_punishment ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ( neq $?gen29 (create$) ) ) ) ( not ( object ( name ?gen26 ) ( is-a increase_punishment ) ( negative-overruled $?gen31 & : ( eq $?gen31 ( create$ rule2-overruled $?gen29 $?gen30 ) ) ) ) ) ( test ( instance-existp ?gen26 ) ) => ( bind $?gen31 ( create$ rule2-overruled $?gen29 $?gen30 ) ) ( message-modify-instance ?gen26 ( negative-overruled $?gen31 ) ) )
( defrule rule2-support-gen415 ( declare ( salience ( + 1000 ( calc-defeasible-priority 5 [rule2] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen25 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:protectionMeasureViolation true ) ) ( object ( name ?gen26 ) ( is-a increase_punishment ) ( defendant ?Defendant ) ( positive-support $?gen28 & : ( not ( subseq-pos ( create$ rule2 ?gen25 $$$ $?gen28 ) ) ) ) ) ( test ( eq ( class ?gen26 ) increase_punishment ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen26 ) ( is-a increase_punishment ) ( positive-support $?gen31 & : ( eq $?gen31 ( create$ rule2 ?gen25 $?gen28 ) ) ) ) ) ( test ( instance-existp ?gen26 ) ) => ( bind $?gen31 ( create$ rule2 ?gen25 $?gen28 ) ) ( message-modify-instance ?gen26 ( positive-support $?gen31 ) ) )
( defrule rule1-defeasibly-dot-gen417 ( declare ( salience ( + 1000 ( calc-defeasible-priority -1 [rule1] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen17 ) ( is-a basic_punishment ) ( defendant ?Defendant ) ( positive 1 ) ( positive-derivator rule1 $? ) ) ( test ( eq ( class ?gen17 ) basic_punishment ) ) ( not ( and ( object ( name ?gen24 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "SEVERE" ) ( positive ?gen23 & : ( >= ?gen23 1 ) ) ) ( object ( name ?gen17 ) ( is-a basic_punishment ) ( negative ~ 2 ) ( positive-overruled $?gen19 & : ( not ( member$ rule1 $?gen19 ) ) ) ) ) ) ( test ( neq ?Defendant nil ) ) ( not ( object ( name ?gen17 ) ( is-a basic_punishment ) ( positive 0 ) ) ) ( test ( instance-existp ?gen17 ) ) => ( message-modify-instance ?gen17 ( positive 0 ) ) )
( defrule rule1-defeasibly-gen419 ( declare ( salience ( + 1000 ( calc-defeasible-priority 1 [rule1] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen24 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "SEVERE" ) ( positive ?gen23 & : ( >= ?gen23 1 ) ) ) ( object ( name ?gen17 ) ( is-a basic_punishment ) ( defendant ?Defendant ) ( positive 0 ) ( negative ~ 2 ) ( positive-overruled $?gen19 & : ( not ( member$ rule1 $?gen19 ) ) ) ) ( test ( eq ( class ?gen17 ) basic_punishment ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen17 ) ( is-a basic_punishment ) ( positive 1 ) ( positive-derivator rule1 ?gen24 ) ) ) ( test ( instance-existp ?gen17 ) ) => ( message-modify-instance ?gen17 ( positive 1 ) ( positive-derivator rule1 ?gen24 ) ) )
( defrule rule1-overruled-dot-gen421 ( declare ( salience ( + 1000 ( calc-defeasible-priority -2 [rule1] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen17 ) ( is-a basic_punishment ) ( defendant ?Defendant ) ( negative-support $?gen20 ) ( negative-overruled $?gen21 & : ( subseq-pos ( create$ rule1-overruled $?gen20 $$$ $?gen21 ) ) ) ) ( test ( eq ( class ?gen17 ) basic_punishment ) ) ( not ( and ( object ( name ?gen24 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "SEVERE" ) ( positive ?gen23 & : ( >= ?gen23 1 ) ) ) ( object ( name ?gen17 ) ( is-a basic_punishment ) ( positive-defeated $?gen19 & : ( not ( member$ rule1 $?gen19 ) ) ) ) ) ) ( test ( and ( neq ?Defendant nil ) ( neq $?gen20 (create$) ) ) ) ( not ( object ( name ?gen17 ) ( is-a basic_punishment ) ( negative-overruled $?gen22 & : ( eq $?gen22 ( delete-member$ $?gen21 ( create$ rule1-overruled $?gen20 ) ) ) ) ) ) ( test ( instance-existp ?gen17 ) ) => ( bind $?gen22 ( delete-member$ $?gen21 ( create$ rule1-overruled $?gen20 ) ) ) ( message-modify-instance ?gen17 ( negative-overruled $?gen22 ) ) )
( defrule rule1-overruled-gen423 ( declare ( salience ( + 1000 ( calc-defeasible-priority 2 [rule1] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen24 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "SEVERE" ) ( positive ?gen23 & : ( >= ?gen23 1 ) ) ) ( object ( name ?gen17 ) ( is-a basic_punishment ) ( defendant ?Defendant ) ( negative-support $?gen20 ) ( negative-overruled $?gen21 & : ( not ( subseq-pos ( create$ rule1-overruled $?gen20 $$$ $?gen21 ) ) ) ) ( positive-defeated $?gen19 & : ( not ( member$ rule1 $?gen19 ) ) ) ) ( test ( eq ( class ?gen17 ) basic_punishment ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ( neq $?gen20 (create$) ) ) ) ( not ( object ( name ?gen17 ) ( is-a basic_punishment ) ( negative-overruled $?gen22 & : ( eq $?gen22 ( create$ rule1-overruled $?gen20 $?gen21 ) ) ) ) ) ( test ( instance-existp ?gen17 ) ) => ( bind $?gen22 ( create$ rule1-overruled $?gen20 $?gen21 ) ) ( message-modify-instance ?gen17 ( negative-overruled $?gen22 ) ) )
( defrule rule1-support-gen425 ( declare ( salience ( + 1000 ( calc-defeasible-priority 5 [rule1] ) ) ) ) ( run-deductive-rules ) ( object ( name ?gen16 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "SEVERE" ) ) ( object ( name ?gen17 ) ( is-a basic_punishment ) ( defendant ?Defendant ) ( positive-support $?gen19 & : ( not ( subseq-pos ( create$ rule1 ?gen16 $$$ $?gen19 ) ) ) ) ) ( test ( eq ( class ?gen17 ) basic_punishment ) ) ( test ( and ( neq ?Defendant (create$) ) ( neq ?Defendant nil ) ) ) ( not ( object ( name ?gen17 ) ( is-a basic_punishment ) ( positive-support $?gen22 & : ( eq $?gen22 ( create$ rule1 ?gen16 $?gen19 ) ) ) ) ) ( test ( instance-existp ?gen17 ) ) => ( bind $?gen22 ( create$ rule1 ?gen16 $?gen19 ) ) ( message-modify-instance ?gen17 ( positive-support $?gen22 ) ) )
( defrule pen2-deductive-gen213 ( declare ( salience ( calc-salience fine ) ) ) ( run-deductive-rules ) ( object ( name ?gen121 ) ( is-a increase_punishment ) ( defendant ?Defendant ) ) ( not ( object ( is-a fine ) ( value 5000 ) ) ) ( test ( not ( instance-existp ( symbol-to-instance-name ( sym-cat fine 5000 ) ) ) ) ) => ( bind ?oid ( symbol-to-instance-name ( sym-cat fine 5000 ) ) ) ( make-instance ?oid of fine ( value 5000 ) ) )
( defrule pen1-deductive-gen212 ( declare ( salience ( calc-salience imprisonment ) ) ) ( run-deductive-rules ) ( object ( name ?gen112 ) ( is-a basic_punishment ) ( defendant ?Defendant ) ) ( not ( object ( is-a imprisonment ) ( value 6 ) ) ) ( test ( not ( instance-existp ( symbol-to-instance-name ( sym-cat imprisonment 6 ) ) ) ) ) => ( bind ?oid ( symbol-to-instance-name ( sym-cat imprisonment 6 ) ) ) ( make-instance ?oid of imprisonment ( value 6 ) ) )
( defrule rule10-deductive-gen211 ( declare ( salience ( calc-salience threat_offense_factor ) ) ) ( run-deductive-rules ) ( object ( name ?gen100 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:violenceNature "THREAT" ) ) ( object ( name ?gen101 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "NONE" ) ) ( not ( object ( is-a threat_offense_factor ) ( defendant ?Defendant ) ) ) ( test ( not ( instance-existp ( symbol-to-instance-name ( sym-cat threat_offense_factor ?Defendant ) ) ) ) ) => ( bind ?oid ( symbol-to-instance-name ( sym-cat threat_offense_factor ?Defendant ) ) ) ( make-instance ?oid of threat_offense_factor ( defendant ?Defendant ) ) )
( defrule rule9-deductive-gen210 ( declare ( salience ( calc-salience light_offense_factor ) ) ) ( run-deductive-rules ) ( object ( name ?gen88 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:violenceNature "RECKLESS_BEHAVIOUR" ) ) ( object ( name ?gen89 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "NONE" ) ) ( not ( object ( is-a light_offense_factor ) ( defendant ?Defendant ) ) ) ( test ( not ( instance-existp ( symbol-to-instance-name ( sym-cat light_offense_factor ?Defendant ) ) ) ) ) => ( bind ?oid ( symbol-to-instance-name ( sym-cat light_offense_factor ?Defendant ) ) ) ( make-instance ?oid of light_offense_factor ( defendant ?Defendant ) ) )
( defrule rule8-deductive-gen209 ( declare ( salience ( calc-salience multiple_victims_factor ) ) ) ( run-deductive-rules ) ( object ( name ?gen79 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:numvictims ?NumVictims ) ) ( not ( object ( is-a multiple_victims_factor ) ( defendant ?Defendant ) ) ) ( test ( not ( instance-existp ( symbol-to-instance-name ( sym-cat multiple_victims_factor ?Defendant ) ) ) ) ) => ( bind ?oid ( symbol-to-instance-name ( sym-cat multiple_victims_factor ?Defendant ) ) ) ( make-instance ?oid of multiple_victims_factor ( defendant ?Defendant ) ) )
( defrule rule7-deductive-gen208 ( declare ( salience ( calc-salience recidivist_factor ) ) ) ( run-deductive-rules ) ( object ( name ?gen70 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:previouslyConvicted true ) ) ( not ( object ( is-a recidivist_factor ) ( defendant ?Defendant ) ) ) ( test ( not ( instance-existp ( symbol-to-instance-name ( sym-cat recidivist_factor ?Defendant ) ) ) ) ) => ( bind ?oid ( symbol-to-instance-name ( sym-cat recidivist_factor ?Defendant ) ) ) ( make-instance ?oid of recidivist_factor ( defendant ?Defendant ) ) )
( defrule rule6-deductive-gen207 ( declare ( salience ( calc-salience child_victim_factor ) ) ) ( run-deductive-rules ) ( object ( name ?gen61 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:victimRelationship "CHILD" ) ) ( not ( object ( is-a child_victim_factor ) ( defendant ?Defendant ) ) ) ( test ( not ( instance-existp ( symbol-to-instance-name ( sym-cat child_victim_factor ?Defendant ) ) ) ) ) => ( bind ?oid ( symbol-to-instance-name ( sym-cat child_victim_factor ?Defendant ) ) ) ( make-instance ?oid of child_victim_factor ( defendant ?Defendant ) ) )
( defrule rule5-deductive-gen206 ( declare ( salience ( calc-salience family_offense_factor ) ) ) ( run-deductive-rules ) ( object ( name ?gen52 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:victimRelationship "SPOUSE" ) ) ( not ( object ( is-a family_offense_factor ) ( defendant ?Defendant ) ) ) ( test ( not ( instance-existp ( symbol-to-instance-name ( sym-cat family_offense_factor ?Defendant ) ) ) ) ) => ( bind ?oid ( symbol-to-instance-name ( sym-cat family_offense_factor ?Defendant ) ) ) ( make-instance ?oid of family_offense_factor ( defendant ?Defendant ) ) )
( defrule rule4-deductive-gen205 ( declare ( salience ( calc-salience weapon_factor ) ) ) ( run-deductive-rules ) ( object ( name ?gen43 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:useOfWeapon true ) ) ( not ( object ( is-a weapon_factor ) ( defendant ?Defendant ) ) ) ( test ( not ( instance-existp ( symbol-to-instance-name ( sym-cat weapon_factor ?Defendant ) ) ) ) ) => ( bind ?oid ( symbol-to-instance-name ( sym-cat weapon_factor ?Defendant ) ) ) ( make-instance ?oid of weapon_factor ( defendant ?Defendant ) ) )
( defrule rule3-deductive-gen204 ( declare ( salience ( calc-salience aggravating_factor ) ) ) ( run-deductive-rules ) ( object ( name ?gen34 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:childrenPresent true ) ) ( not ( object ( is-a aggravating_factor ) ( defendant ?Defendant ) ) ) ( test ( not ( instance-existp ( symbol-to-instance-name ( sym-cat aggravating_factor ?Defendant ) ) ) ) ) => ( bind ?oid ( symbol-to-instance-name ( sym-cat aggravating_factor ?Defendant ) ) ) ( make-instance ?oid of aggravating_factor ( defendant ?Defendant ) ) )
( defrule rule2-deductive-gen203 ( declare ( salience ( calc-salience increase_punishment ) ) ) ( run-deductive-rules ) ( object ( name ?gen25 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:protectionMeasureViolation true ) ) ( not ( object ( is-a increase_punishment ) ( defendant ?Defendant ) ) ) ( test ( not ( instance-existp ( symbol-to-instance-name ( sym-cat increase_punishment ?Defendant ) ) ) ) ) => ( bind ?oid ( symbol-to-instance-name ( sym-cat increase_punishment ?Defendant ) ) ) ( make-instance ?oid of increase_punishment ( defendant ?Defendant ) ) )
( defrule rule1-deductive-gen202 ( declare ( salience ( calc-salience basic_punishment ) ) ) ( run-deductive-rules ) ( object ( name ?gen16 ) ( is-a lc:case ) ( lc:defendant ?Defendant ) ( lc:injuryTypes "SEVERE" ) ) ( not ( object ( is-a basic_punishment ) ( defendant ?Defendant ) ) ) ( test ( not ( instance-existp ( symbol-to-instance-name ( sym-cat basic_punishment ?Defendant ) ) ) ) ) => ( bind ?oid ( symbol-to-instance-name ( sym-cat basic_punishment ?Defendant ) ) ) ( make-instance ?oid of basic_punishment ( defendant ?Defendant ) ) )
