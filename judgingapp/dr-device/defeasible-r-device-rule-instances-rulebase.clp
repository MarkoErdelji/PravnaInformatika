([rule1] of defeasible-rule
   (rule-name rule1)
   (original-rule "rule1 ( lc:case ( lc:defendant ?Defendant ) ( lc:injuryTypes \"SEVERE\" ) ) => ( basic_punishment ( defendant ?Defendant ) )")
   (condition-classes)
   (conclusion-class basic_punishment)
   (negated no)
   (superior)
   (deductive-rule rule1-deductive)
   (overruled-rule rule1-overruled)
   (system no)
   (support-rule rule1-support)
   (defeasibly-rule rule1-defeasibly)
   (defeated-rule nil))

([rule2] of defeasible-rule
   (rule-name rule2)
   (original-rule "rule2 ( lc:case ( lc:defendant ?Defendant ) ( lc:protectionMeasureViolation true ) ) => ( increase_punishment ( defendant ?Defendant ) )")
   (condition-classes)
   (conclusion-class increase_punishment)
   (negated no)
   (superior)
   (deductive-rule rule2-deductive)
   (overruled-rule rule2-overruled)
   (system no)
   (support-rule rule2-support)
   (defeasibly-rule rule2-defeasibly)
   (defeated-rule nil))

([rule3] of defeasible-rule
   (rule-name rule3)
   (original-rule "rule3 ( lc:case ( lc:defendant ?Defendant ) ( lc:childrenPresent true ) ) => ( aggravating_factor ( defendant ?Defendant ) )")
   (condition-classes)
   (conclusion-class aggravating_factor)
   (negated no)
   (superior)
   (deductive-rule rule3-deductive)
   (overruled-rule rule3-overruled)
   (system no)
   (support-rule rule3-support)
   (defeasibly-rule rule3-defeasibly)
   (defeated-rule nil))

([rule4] of defeasible-rule
   (rule-name rule4)
   (original-rule "rule4 ( lc:case ( lc:defendant ?Defendant ) ( lc:useOfWeapon true ) ) => ( weapon_factor ( defendant ?Defendant ) )")
   (condition-classes)
   (conclusion-class weapon_factor)
   (negated no)
   (superior)
   (deductive-rule rule4-deductive)
   (overruled-rule rule4-overruled)
   (system no)
   (support-rule rule4-support)
   (defeasibly-rule rule4-defeasibly)
   (defeated-rule nil))

([rule5] of defeasible-rule
   (rule-name rule5)
   (original-rule "rule5 ( lc:case ( lc:defendant ?Defendant ) ( lc:victimRelationship \"SPOUSE\" ) ) => ( family_offense_factor ( defendant ?Defendant ) )")
   (condition-classes)
   (conclusion-class family_offense_factor)
   (negated no)
   (superior)
   (deductive-rule rule5-deductive)
   (overruled-rule rule5-overruled)
   (system no)
   (support-rule rule5-support)
   (defeasibly-rule rule5-defeasibly)
   (defeated-rule nil))

([rule6] of defeasible-rule
   (rule-name rule6)
   (original-rule "rule6 ( lc:case ( lc:defendant ?Defendant ) ( lc:victimRelationship \"CHILD\" ) ) => ( child_victim_factor ( defendant ?Defendant ) )")
   (condition-classes)
   (conclusion-class child_victim_factor)
   (negated no)
   (superior)
   (deductive-rule rule6-deductive)
   (overruled-rule rule6-overruled)
   (system no)
   (support-rule rule6-support)
   (defeasibly-rule rule6-defeasibly)
   (defeated-rule nil))

([rule7] of defeasible-rule
   (rule-name rule7)
   (original-rule "rule7 ( lc:case ( lc:defendant ?Defendant ) ( lc:previouslyConvicted true ) ) => ( recidivist_factor ( defendant ?Defendant ) )")
   (condition-classes)
   (conclusion-class recidivist_factor)
   (negated no)
   (superior)
   (deductive-rule rule7-deductive)
   (overruled-rule rule7-overruled)
   (system no)
   (support-rule rule7-support)
   (defeasibly-rule rule7-defeasibly)
   (defeated-rule nil))

([rule8] of defeasible-rule
   (rule-name rule8)
   (original-rule "rule8 ( lc:case ( lc:defendant ?Defendant ) ( lc:numvictims ?NumVictims ) ) => ( multiple_victims_factor ( defendant ?Defendant ) )")
   (condition-classes)
   (conclusion-class multiple_victims_factor)
   (negated no)
   (superior)
   (deductive-rule rule8-deductive)
   (overruled-rule rule8-overruled)
   (system no)
   (support-rule rule8-support)
   (defeasibly-rule rule8-defeasibly)
   (defeated-rule nil))

([rule9] of defeasible-rule
   (rule-name rule9)
   (original-rule "rule9 ( declare ( superior rule1 rule6 rule8 ) ) ( lc:case ( lc:defendant ?Defendant ) ( lc:violenceNature \"RECKLESS_BEHAVIOUR\" ) ) ( lc:case ( lc:defendant ?Defendant ) ( lc:injuryTypes \"NONE\" ) ) => ( light_offense_factor ( defendant ?Defendant ) )")
   (condition-classes)
   (conclusion-class light_offense_factor)
   (negated no)
   (superior rule1 rule6 rule8)
   (deductive-rule rule9-deductive)
   (overruled-rule rule9-overruled)
   (system no)
   (support-rule rule9-support)
   (defeasibly-rule rule9-defeasibly)
   (defeated-rule rule9-defeated))

([rule10] of defeasible-rule
   (rule-name rule10)
   (original-rule "rule10 ( declare ( superior rule1 rule6 rule8 ) ) ( lc:case ( lc:defendant ?Defendant ) ( lc:violenceNature \"THREAT\" ) ) ( lc:case ( lc:defendant ?Defendant ) ( lc:injuryTypes \"NONE\" ) ) => ( threat_offense_factor ( defendant ?Defendant ) )")
   (condition-classes)
   (conclusion-class threat_offense_factor)
   (negated no)
   (superior rule1 rule6 rule8)
   (deductive-rule rule10-deductive)
   (overruled-rule rule10-overruled)
   (system no)
   (support-rule rule10-support)
   (defeasibly-rule rule10-defeasibly)
   (defeated-rule rule10-defeated))

([pen1] of defeasible-rule
   (rule-name pen1)
   (original-rule "pen1 ( basic_punishment ( defendant ?Defendant ) ) => ( imprisonment ( value 6 ) )")
   (condition-classes)
   (conclusion-class imprisonment)
   (negated no)
   (superior)
   (deductive-rule pen1-deductive)
   (overruled-rule pen1-overruled)
   (system no)
   (support-rule pen1-support)
   (defeasibly-rule pen1-defeasibly)
   (defeated-rule nil))

([pen2] of defeasible-rule
   (rule-name pen2)
   (original-rule "pen2 ( increase_punishment ( defendant ?Defendant ) ) => ( fine ( value 5000 ) )")
   (condition-classes)
   (conclusion-class fine)
   (negated no)
   (superior)
   (deductive-rule pen2-deductive)
   (overruled-rule pen2-overruled)
   (system no)
   (support-rule pen2-support)
   (defeasibly-rule pen2-defeasibly)
   (defeated-rule nil))

([pen4] of defeasible-rule
   (rule-name pen4)
   (original-rule "pen4 ( child_victim_factor ( defendant ?Defendant ) ) => ( imprisonment ( value 12 ) )")
   (condition-classes)
   (conclusion-class imprisonment)
   (negated no)
   (superior)
   (deductive-rule pen4-deductive)
   (overruled-rule pen4-overruled)
   (system no)
   (support-rule pen4-support)
   (defeasibly-rule pen4-defeasibly)
   (defeated-rule nil))

([pen3] of defeasible-rule
   (rule-name pen3)
   (original-rule "pen3 ( recidivist_factor ( defendant ?Defendant ) ) => ( fine ( value 10000 ) )")
   (condition-classes)
   (conclusion-class fine)
   (negated no)
   (superior)
   (deductive-rule pen3-deductive)
   (overruled-rule pen3-overruled)
   (system no)
   (support-rule pen3-support)
   (defeasibly-rule pen3-defeasibly)
   (defeated-rule nil))

([pen5] of defeasible-rule
   (rule-name pen5)
   (original-rule "pen5 ( multiple_victims_factor ( defendant ?Defendant ) ) => ( imprisonment ( value 24 ) )")
   (condition-classes)
   (conclusion-class imprisonment)
   (negated no)
   (superior)
   (deductive-rule pen5-deductive)
   (overruled-rule pen5-overruled)
   (system no)
   (support-rule pen5-support)
   (defeasibly-rule pen5-defeasibly)
   (defeated-rule nil))

([pen6] of defeasible-rule
   (rule-name pen6)
   (original-rule "pen6 ( light_offense_factor ( defendant ?Defendant ) ) => ( fine ( value 2000 ) )")
   (condition-classes)
   (conclusion-class fine)
   (negated no)
   (superior)
   (deductive-rule pen6-deductive)
   (overruled-rule pen6-overruled)
   (system no)
   (support-rule pen6-support)
   (defeasibly-rule pen6-defeasibly)
   (defeated-rule nil))

([pen7] of defeasible-rule
   (rule-name pen7)
   (original-rule "pen7 ( threat_offense_factor ( defendant ?Defendant ) ) => ( fine ( value 3000 ) )")
   (condition-classes)
   (conclusion-class fine)
   (negated no)
   (superior)
   (deductive-rule pen7-deductive)
   (overruled-rule pen7-overruled)
   (system no)
   (support-rule pen7-support)
   (defeasibly-rule pen7-defeasibly)
   (defeated-rule nil))

